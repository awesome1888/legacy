{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/api/home.ts","webpack:///./src/api/sync.ts","webpack:///./src/controller/index.ts","webpack:///./src/controller/schema/index.ts","webpack:///./src/controller/schema/input.dto.ts","webpack:///./src/graphql/resolvers/index.ts","webpack:///./src/graphql/types/error.graphql","webpack:///./src/graphql/types/filter.graphql","webpack:///./src/graphql/types/index.ts","webpack:///./src/graphql/types/sort.graphql","webpack:///./src/index.js","webpack:///./src/lib/cache.js","webpack:///./src/lib/cors.js","webpack:///./src/lib/database/connection-manager.js","webpack:///./src/lib/database/data-loader-pool.js","webpack:///./src/lib/database/entity-manager.js","webpack:///./src/lib/database/id-mapper.js","webpack:///./src/lib/database/migrator.js","webpack:///./src/lib/database/query.js","webpack:///./src/lib/error-handler.js","webpack:///./src/lib/graphql/apollo.js","webpack:///./src/lib/graphql/ast.js","webpack:///./src/lib/graphql/graphql-express.js","webpack:///./src/lib/graphql/resolver-generator.js","webpack:///./src/lib/graphql/type-generator.js","webpack:///./src/lib/lodash.js","webpack:///./src/lib/msc/api.ts","webpack:///./src/lib/msc/decorator.ts","webpack:///./src/lib/msc/dto-compiler.ts","webpack:///./src/lib/msc/index.ts","webpack:///./src/lib/msc/vault.ts","webpack:///./src/lib/util.ts","webpack:///./src/migrations/1517934720430-Seed.ts","webpack:///./src/migrations/index.ts","webpack:///./src/model/schema.ts","webpack:///./src/service/schema.js","webpack:///external \"@apollographql/graphql-playground-html\"","webpack:///external \"@babel/polyfill\"","webpack:///external \"accepts\"","webpack:///external \"apollo-server-core\"","webpack:///external \"apollo-server-express\"","webpack:///external \"cors\"","webpack:///external \"dataloader\"","webpack:///external \"ew-internals\"","webpack:///external \"express\"","webpack:///external \"helmet\"","webpack:///external \"lodash.clonedeep\"","webpack:///external \"lodash.difference\"","webpack:///external \"lodash.get\"","webpack:///external \"lodash.intersection\"","webpack:///external \"lodash.isobject\"","webpack:///external \"lodash.union\"","webpack:///external \"md5\"","webpack:///external \"merge-graphql-schemas\"","webpack:///external \"naming-style\"","webpack:///external \"path\"","webpack:///external \"project-minimum-core\"","webpack:///external \"redis-tag-cache\"","webpack:///external \"typeorm\"","webpack:///external \"uuid/v4\"","webpack:///external \"yup\""],"names":["useHomeAPI","app","get","wrapError","req","res","status","send","useSyncAPI","params","Migrator","migrate","SchemaController","Endpoint","Get","Put","Patch","BodyInput","SchemaInputDTO","getEntity","type","entity","runtime","connectionManager","result","Result","errors","push","message","code","ERROR_REQUEST","schema","SchemaService","load","data","commit","args","draftSchema","put","patch","body","index","ts","Schema","getSchema","TSDTO","DTO","IndexDTO","Attribute","required","errorType","sortType","filterType","express","settings","Settings","useErrorHandler","host","port","process","env","PORT","set","useCORS","use","static","path","join","cwd","helmet","json","urlencoded","extended","cache","Cache","make","ConnectionManager","systemConnection","getSystem","__DEV__","runMigrations","useGraphQL","useMSC","controllers","listen","logger","info","__TEST__","Error","url","password","constructor","props","_","isne","sUrl","decomposeURL","injectPassword","TagCache","redis","connectTimeout","invalidate","cors","origin","cb","then","corsSettings","origins","split","map","x","trim","match","iane","indexOf","catch","error","connections","entities","preConnect","main","close","system","name","SchemaEntity","migrationsTableName","DB_MIGRATION_TABLE_NAME","migrations","invalidateConnections","createConnection","DataLoaderPool","pool","loaderId","fn","DataLoader","DatabaseEntityManager","getName","field","isReference","isMultiple","getTableName","DB_ENTITY_TABLE_PREFIX","substr","DB_IDENTIFIER_LENGTH","getReferenceTableName","DB_REF_TABLE_PREFIX","md5","getDBType","ENTITY_ID_FIELD_NAME","getActualType","getDBFieldGenerationStrategy","ENTITY_PK_FIELD_NAME","getDBFieldLength","length","getLength","undefined","getDDLByEntity","table","columns","isNullable","isGenerated","isPrimary","isUnique","isArray","zerofill","unsigned","generated","getFields","forEach","columnMeta","isRequired","generationStrategy","entityList","getForEntity","getByName","all","getByDefinition","primary","nullable","references","array","EntitySchema","REFERENCE_ENTITY_PARENT_FIELD_NAME","REFERENCE_ENTITY_CHILD_FIELD_NAME","IdMapper","connection","idToInternal","idToGet","addId","id","databaseEntity","entityName","options","getInternalId","obtain","Promise","Object","keys","repository","getRepository","find","where","In","select","items","item","getDelta","queryRunner","createQueryRunner","tables","getTables","tablesToCreate","tableNamesToDrop","tablesToProbablyAlter","currentTables","futureTables","tableToEntity","EntityManager","values","startsWith","tablesToAlter","i","futureTable","currentTable","tableFutureFieldNames","reduce","tableCurrentFieldNames","fieldsToAdd","difference","fieldsToDelete","j","includes","add","delete","currentReferences","filter","futureReferences","getMultipleReferences","referenceTableName","union","create","drop","alter","delta","entityTableNames","query","DB_TABLE_PREFIX","t","table_name","Query","queryBuilder","tableName","parameters","restrictLimit","sort","tableNameSafe","sanitize","selectSafe","prepareSelect","alias","orderBySafe","prepareOrderBy","limit","offset","prepareLimitOffset","skip","orderBy","take","order","ione","prefix","legalFields","getLegalFields","fieldName","page","pageSize","parseInt","Number","isNaN","DB_QUERY_FIND_MAX_PAGE_SIZE","fields","toSelect","intersection","value","replace","on","err","next","server","getServer","stop","databaseEntityManager","entityTypeDefs","GQLTypeGenerator","eResolver","ResolverGenerator","ApolloServer","typeDefs","mergeTypes","resolvers","mergeResolvers","context","requestId","uuid","dataLoaderPool","debug","method","accept","accepts","types","prefersHTML","setHeader","playground","renderPlaygroundPage","endpoint","serverInstance","graphqlExpress","createGraphQLServerOptions","getASTAt","ast","fieldNodes","node","selectionSet","selections","f","getSelectionAt","e","arguments","runHttpQuery","request","convertNodeHttpToRequest","graphqlResponse","responseInit","headers","entries","write","end","statusCode","makeForEntity","makeGetForEntity","source","selectedFields","dbItem","wrap","findOne","convertToPlain","makeFindForEntity","search","makeWhereFind","count","makePutForEntity","isNewItem","castData","validateData","reference","singleReferences","getSingleReferences","referenceFieldName","referencedDatabaseEntity","getReferenceAttributes","databaseItem","merge","save","manageMultipleReferences","makeDeleteForEntity","idInternal","getId","referenceField","referenceDatabaseEntity","referenceRepository","referenceQueryBuilder","createQueryBuilder","from","execute","getCamelName","Mutation","makeReferenceResolversForEntity","ids","Array","idMapper","idItem","insert","into","referenceId","self","rel","getReferences","makeReferenceResolverMultiple","makeReferenceResolverSingle","referenceValue","referencedEntityName","referencedRepository","key","loader","referencedTableName","referencedEntity","referencedQueryBuilder","referencedTableNameSafe","referenceFieldNameSafe","innerJoinAndSelect","getMany","Like","plain","fieldType","multiple","fieldValue","FIELD_TYPE_DATETIME","subItem","Date","toISOString","getReferencedEntityName","referenceEntityName","TypeGenerator","tFields","iFields","fFields","sFields","getQueryFieldName","getGQLFieldType","input","gqlType","FIELD_TYPE_STRING","FIELD_TYPE_INTEGER","FIELD_TYPE_BOOLEAN","referencedEntityNameCamel","isObject","isFunction","arg","cloneDeep","toJSON","ERROR_INTERNAL","runtimeParameters","controller","hasVaultFor","rootEndpoint","methods","getVaultFor","methodName","methodRecord","bodyDTO","outputDTO","validator","getValidator","validate","abortEarly","filterStructure","inner","getHeaders","header","JSON","stringify","vault","target","property","descriptor","assign","Post","Delete","dto","Output","isDTO","initializer","attributes","Map","depth","yup","attributeName","shape","subType","of","typeError","structure","legalKeys","attribute","structureValue","subValue","obj","getVault","oUrl","URL","toString","parts","hostname","convertToCamel","str","camel","toLowerCase","toUpperCase","Seed1517934720430","up","synchronize","current","draft","version","demoSchema","down","label","ENTITY_ID_FIELD_LENGTH","unique","Entity","DB_SCHEMA_TABLE_NAME","PrimaryGeneratedColumn","Column","default","getHealth","repo","currentSchema","getVersion","declaration"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import { Request, Response, Express } from 'express';\nimport { wrapError } from 'ew-internals';\n\nconst useHomeAPI = (app: Express) => {\n    app.get(\n        '/',\n        wrapError(async (req: Request, res: Response) => {\n            res.status(200).send('Hello');\n        }),\n    );\n};\n\nexport default useHomeAPI;\n","import { Request, Response, Express } from 'express';\nimport { wrapError } from 'ew-internals';\nimport Migrator from '../lib/database/migrator';\n\nconst useSyncAPI = (app: Express, params: object = {}) => {\n    app.get(\n        '/sync',\n        wrapError(async (req: Request, res: Response) => {\n            await Migrator.migrate(params);\n            res.status(200).send(`<pre>1</pre>`);\n        }),\n    );\n};\n\nexport default useSyncAPI;\n","import { SchemaController } from './schema';\n\nexport default [SchemaController];\n","import { Schema } from 'project-minimum-core';\nimport {\n    Endpoint,\n    Get,\n    Put,\n    Patch,\n    BodyInput,\n    Output,\n    Result,\n    InputContext,\n    ERROR_REQUEST,\n} from '../../lib/msc';\nimport SchemaService from '../../service/schema';\n\nimport { SchemaInputDTO } from './input.dto';\n\n@Endpoint('/schema')\nexport class SchemaController {\n    @Get(':type/:entity')\n    public async getEntity(\n        { type, entity },\n        { runtime: { connectionManager } }: InputContext,\n    ): Promise<Result> {\n        const result = new Result();\n\n        if (type !== 'draft' && type !== 'actual') {\n            result.errors.push({\n                message: 'Illegal schema type',\n                code: 'illegal_schema_type',\n                type: ERROR_REQUEST,\n            });\n            return result;\n        }\n\n        const schema = await SchemaService.load(type, connectionManager);\n        if (schema) {\n            result.data = schema.getEntity(entity);\n        }\n\n        if (!result.data) {\n            result.status = 404;\n        }\n\n        return result;\n    }\n\n    @Get(':type')\n    public async get(\n        { type },\n        { runtime: { connectionManager } }: InputContext,\n    ): Promise<Result> {\n        const result = new Result();\n\n        if (type !== 'draft' && type !== 'actual') {\n            result.errors.push({\n                message: 'Illegal schema type',\n                code: 'illegal_schema_type',\n                type: ERROR_REQUEST,\n            });\n            return result;\n        }\n\n        result.data = await SchemaService.load(type, connectionManager);\n\n        return result;\n    }\n\n    @Put()\n    public async commit(\n        args,\n        { runtime: { connectionManager } }: InputContext,\n    ): Promise<Result> {\n        const result = new Result();\n\n        // replace an actual schema with a draft\n        const draftSchema = await SchemaService.load(\n            'draft',\n            connectionManager,\n        );\n        if (draftSchema) {\n            result.errors = await SchemaService.put(\n                'actual',\n                draftSchema,\n                connectionManager,\n            );\n        }\n\n        return result;\n    }\n\n    @Patch()\n    @BodyInput(SchemaInputDTO)\n    public async patch(\n        params,\n        { body, runtime: { connectionManager } }: InputContext,\n    ): Promise<Result> {\n        const result = new Result();\n\n        const schema = body.index.ts;\n        result.errors = await SchemaService.put(\n            'draft',\n            new Schema({ schema }).getSchema(), // todo: this makes a vulnerability, check if healthy before saving!!!\n            connectionManager,\n        );\n\n        return result;\n    }\n}\n","import { DTO, Attribute } from '../../lib/msc';\n\n@DTO()\nclass TSDTO {}\n\n@DTO()\nclass IndexDTO {\n    @Attribute({ type: TSDTO, required: true })\n    public ts: object;\n}\n\n@DTO()\nexport class SchemaInputDTO {\n    @Attribute({ type: IndexDTO, required: true })\n    public index: object;\n}\n","export default [];\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Error\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"subject\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":73}};\n    doc.loc.source = {\"body\":\"type Error {\\n    code: String!\\n    message: String\\n    subject: String\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"EnumTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterLogic\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"AND\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"OR\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NAND\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NOR\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterOperator\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"EQ\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NE\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"IN\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NIN\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"GT\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"LT\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"GTE\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"LTE\"},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"IFilterFieldValue\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Operation\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterOperator\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Value\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Values\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":235}};\n    doc.loc.source = {\"body\":\"enum FilterLogic {\\n    AND\\n    OR\\n    NAND\\n    NOR\\n}\\n\\nenum FilterOperator {\\n    EQ\\n    NE\\n    IN\\n    NIN\\n    GT\\n    LT\\n    GTE\\n    LTE\\n}\\n\\ninput IFilterFieldValue {\\n    Operation: FilterOperator\\n    Value: String\\n    Values: [String]\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","import errorType from './error.graphql';\nimport sortType from './sort.graphql';\nimport filterType from './filter.graphql';\n\nexport default [errorType, sortType, filterType];\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"EnumTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"SortOrder\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ASC\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"DESC\"},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":36}};\n    doc.loc.source = {\"body\":\"enum SortOrder {\\n    ASC\\n    DESC\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","import '@babel/polyfill';\nimport { Settings } from 'ew-internals';\nimport path from 'path';\nimport helmet from 'helmet';\nimport express from 'express';\n\nimport useErrorHandler from './lib/error-handler';\nimport useCORS from './lib/cors';\n\n// import { InterCom } from './lib/intercom';\nimport Cache from './lib/cache';\nimport ConnectionManager from './lib/database/connection-manager';\n\n// simple API as middleware\nimport useHomeAPI from './api/home';\nimport useGraphQL from './lib/graphql/apollo';\n// import useSchemaAPI from './api/schema';\nimport useSyncAPI from './api/sync';\n\n// MSC-API\nimport { useMSC } from './lib/msc';\nimport controllers from './controller';\n\n(async () => {\n    const app = express();\n    const settings = new Settings();\n\n    useErrorHandler(app);\n\n    const host = await settings.get('network.host', 'localhost');\n    const port = process.env.PORT || (await settings.get('network.port', 3000));\n\n    app.set('host', host);\n    app.set('port', port);\n    // app.set('query parser', query => {\n    //   return qs.parse(query, { allowPrototypes: false, depth: 10 });\n    // });\n\n    useCORS(app, settings);\n\n    app.use(express.static(path.join(process.cwd(), 'public')));\n    app.use(helmet());\n    app.use(express.json());\n    app.use(\n        express.urlencoded({\n            extended: true,\n        }),\n    );\n\n    const cache = await Cache.make({ settings });\n    const connectionManager = new ConnectionManager({ settings });\n    const systemConnection = await connectionManager.getSystem();\n    if (__DEV__) {\n        await systemConnection.runMigrations();\n    }\n\n    // const intercom = new InterCom({\n    //     url: await settings.get('intercom.url', ''),\n    // });\n    // await intercom.start();\n\n    useHomeAPI(app);\n    useGraphQL(app, {\n        settings,\n        cache,\n        connectionManager,\n    });\n    useMSC(app, controllers, {\n        connectionManager,\n    });\n    // todo: temporary endpoint\n    useSyncAPI(app, {\n        cache,\n        connectionManager,\n    });\n\n    app.listen({ port }, () => {\n        logger.info(\n            `🚀 API server is ready at http://${host}:${port}`,\n            !__TEST__,\n        );\n    });\n})();\n","/**\n * A purpose of this class is to gracefully handle situations when\n * no cache endpoint provided\n */\n\nimport TagCache from 'redis-tag-cache';\nimport { injectPassword, decomposeURL } from './util';\n\nexport default class Cache {\n    static async make(params = {}) {\n        const { settings } = params;\n        if (!settings) {\n            throw new Error('No settings provided');\n        }\n\n        const url = await settings.get('cache.url', null);\n        const password = await settings.get('cache.password', null);\n\n        return new this({\n            url,\n            password,\n        });\n    }\n\n    constructor(props = {}) {\n        const { url, password } = props;\n        this.cache = null;\n        if (_.isne(url)) {\n            const sUrl = decomposeURL(injectPassword(url, password));\n            if (sUrl === null) {\n                // logger.warn('Illegal URL passed, will proceed without cache');\n                return;\n            }\n\n            this.cache = new TagCache({\n                redis: {\n                    ...sUrl,\n                    connectTimeout: 1000,\n                },\n            });\n        }\n    }\n\n    async get(...args) {\n        if (this.cache) {\n            return this.cache.get(...args);\n        }\n\n        return null;\n    }\n\n    async set(...args) {\n        if (this.cache) {\n            return this.cache.set(...args);\n        }\n\n        return null;\n    }\n\n    async invalidate(...args) {\n        if (this.cache) {\n            return this.cache.invalidate(...args);\n        }\n\n        return null;\n    }\n}\n","import cors from 'cors';\n\nconst useCORS = (app, settings) => {\n    app.use(\n        cors({\n            origin: (origin, cb) => {\n                // allow requests with no origin, like mobile apps or curl requests\n                if (!origin) {\n                    return cb(null, true);\n                }\n\n                // get cors settings on each hit, to be able to change it at the run-time\n                settings\n                    .get('network.cors', null)\n                    .then(corsSettings => {\n                        if (corsSettings === '*') {\n                            return cb(null, true);\n                        }\n\n                        const origins = _.isne(corsSettings)\n                            ? corsSettings.split(',').map(x => x.trim())\n                            : [];\n\n                        let match = false;\n                        if (_.iane(origins)) {\n                            // we have CORS settings\n                            match = origins.indexOf(origin) >= 0;\n                        }\n\n                        if (match) {\n                            return cb(null, true);\n                        } else {\n                            return cb(new Error('CORS mismatch'), false); // todo: throw 403\n                        }\n                    })\n                    .catch(error => {\n                        logger.error(\n                            'Error occurred when checking CORS',\n                            error,\n                        );\n                        return cb(new Error('CORS error'), false); // todo: throw 500\n                    });\n            },\n        }),\n    );\n};\n\nexport default useCORS;\n","import { createConnection } from 'typeorm';\n\nimport { DB_MIGRATION_TABLE_NAME } from 'project-minimum-core';\nimport SchemaEntity from '../../model/schema';\nimport migrations from '../../migrations';\nimport { injectPassword } from '../util';\n\nexport default class ConnectionManager {\n    constructor({ settings }) {\n        this.settings = settings;\n        this.connections = {};\n    }\n\n    /**\n     * Creates a regular connection to get data over\n     * @param entities\n     * @param preConnect\n     * @returns {Promise<*>}\n     */\n    async get({ entities, preConnect }) {\n        if (!this.connections.main) {\n            this.connections.main = this.make({\n                settings: this.settings,\n                entities,\n                preConnect,\n            });\n        }\n        return this.connections.main;\n    }\n\n    /**\n     * Close current regular connection\n     * @returns {Promise<void>}\n     */\n    async close() {\n        if (this.connections.main) {\n            await this.connections.main.close();\n            this.connections.main = null;\n        }\n    }\n\n    /**\n     * Creates a system connection to get the schema over\n     * @returns {Promise<*|CacheConfigurator.simple|buttonStyle.simple|{'&,&:focus,&:hover,&:visited', '&$primary', '&$info', '&$success', '&$warning', '&$rose', '&$danger', '&$twitter', '&$facebook', '&$google', '&$github'}>}\n     */\n    async getSystem() {\n        if (!this.connections.system) {\n            this.connections.system = this.make({\n                name: 'system',\n                settings: this.settings,\n                entities: [SchemaEntity],\n                migrationsTableName: DB_MIGRATION_TABLE_NAME,\n                migrations,\n            });\n        }\n        return this.connections.system;\n    }\n\n    async invalidateConnections() {\n        await this.close();\n        this.connections = {};\n    }\n\n    async make(params = {}) {\n        const { settings } = params;\n        if (!settings) {\n            throw new Error('No settings provided');\n        }\n\n        const url = await settings.get('db.url', null);\n        const password = await settings.get('db.password', null);\n        const sUrl = injectPassword(url, password);\n\n        return createConnection({\n            ...params,\n            url: sUrl,\n            type: 'postgres',\n        });\n    }\n}\n","import DataLoader from 'dataloader';\n\nexport default class DataLoaderPool {\n    constructor() {\n        this.pool = {};\n    }\n\n    get(loaderId, fn) {\n        if (!_.isne(loaderId) || typeof fn !== 'function') {\n            return null;\n        }\n\n        if (!this.pool[loaderId]) {\n            this.pool[loaderId] = new DataLoader(fn);\n        }\n\n        return this.pool[loaderId];\n    }\n}\n","/**\n * https://github.com/typeorm/typeorm/blob/master/src/driver/types/ColumnTypes.ts\n */\n\nimport md5 from 'md5';\nimport { EntitySchema } from 'typeorm';\nimport {\n    DB_ENTITY_TABLE_PREFIX,\n    DB_IDENTIFIER_LENGTH,\n    DB_REF_TABLE_PREFIX,\n    ENTITY_ID_FIELD_NAME,\n    ENTITY_PK_FIELD_NAME,\n    REFERENCE_ENTITY_PARENT_FIELD_NAME,\n    REFERENCE_ENTITY_CHILD_FIELD_NAME,\n} from 'project-minimum-core';\n\n/**\n * This class creates database entities based on the schema\n */\nexport default class DatabaseEntityManager {\n    /**\n     * @param entity Schema entity (not database entity)\n     * @param field\n     */\n    static getName(entity, field = null) {\n        if (field && field.isReference() && field.isMultiple()) {\n            return `${entity.getName()}_2_${field.getName()}`;\n        }\n\n        return entity.getName();\n    }\n\n    /**\n     * @param entity Schema entity (not database entity)\n     */\n    static getTableName(entity) {\n        return `${DB_ENTITY_TABLE_PREFIX}${entity.getName()}`.substr(\n            0,\n            DB_IDENTIFIER_LENGTH,\n        );\n    }\n\n    /**\n     * @param entity Schema entity (not database entity)\n     * @param field\n     */\n    static getReferenceTableName(entity, field) {\n        return `${DB_REF_TABLE_PREFIX}${md5(\n            `${entity.getName()}_${field.getName()}`,\n        )}`;\n    }\n\n    /**\n     * Get database type by schema type\n     * https://github.com/typeorm/typeorm/blob/master/src/driver/types/ColumnTypes.ts\n     * @param field\n     * @returns {string}\n     */\n    static getDBType(field) {\n        if (field.isReference()) {\n            return field.isMultiple() ? null : 'integer';\n        }\n\n        if (field.getName() === ENTITY_ID_FIELD_NAME) {\n            return 'uuid';\n        }\n\n        const type = field.getActualType();\n\n        switch (type) {\n            case 'string':\n                return 'varchar';\n            case 'integer':\n                return 'integer';\n            case 'datetime':\n                return 'timestamp';\n            case 'boolean':\n                return 'boolean';\n            default:\n                return 'string';\n        }\n    }\n\n    static getDBFieldGenerationStrategy(field) {\n        const name = field.getName();\n\n        if (name === ENTITY_ID_FIELD_NAME) {\n            return 'uuid';\n        }\n\n        if (name === ENTITY_PK_FIELD_NAME) {\n            return 'increment';\n        }\n\n        return null;\n    }\n\n    static getDBFieldLength(field) {\n        const length = field.getLength();\n        // length is not supported by uuid field\n        if (length && field.getName() !== ENTITY_ID_FIELD_NAME) {\n            return length;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Accepts a schema entity and returns a DDL structure of the table to create\n     */\n    static getDDLByEntity(entity) {\n        const table = {\n            name: this.getTableName(entity),\n            columns: [],\n        };\n\n        // add \"system\" field: id\n        table.columns.push({\n            isNullable: false,\n            isGenerated: true,\n            isPrimary: true,\n            isUnique: true,\n            isArray: false,\n            length: '',\n            zerofill: false,\n            unsigned: true,\n            name: ENTITY_PK_FIELD_NAME,\n            type: 'integer',\n            generated: 'increment',\n        });\n\n        entity.getFields().forEach(field => {\n            if (field.isReference() && field.isMultiple()) {\n                // we do not create any fields for many-to-may relation. Instead, a table should be created\n                return;\n            }\n\n            let columnMeta = {\n                isNullable: !field.isRequired(),\n                isGenerated: false,\n                isPrimary: false,\n                isUnique: field.isUnique(),\n                isArray: field.isMultiple(),\n                length: this.getDBFieldLength(field),\n                zerofill: false,\n                unsigned: false,\n                name: field.getName(),\n                type: this.getDBType(field),\n            };\n\n            const generationStrategy = this.getDBFieldGenerationStrategy(field);\n            if (generationStrategy) {\n                columnMeta = {\n                    ...columnMeta,\n                    isGenerated: true,\n                    generationStrategy,\n                };\n            }\n\n            table.columns.push(columnMeta);\n        });\n\n        return table;\n    }\n\n    constructor(schema) {\n        this.schema = schema;\n    }\n\n    /**\n     * Get all database entities by their schema definition\n     */\n    get() {\n        if (!this.entityList) {\n            let result = {};\n            this.schema.getSchema().forEach(entity => {\n                result = { ...result, ...this.getForEntity(entity) };\n            });\n            this.entityList = result;\n        }\n\n        return this.entityList;\n    }\n\n    getByName(name) {\n        const all = this.get();\n        return all[name];\n    }\n\n    getByDefinition(entity, field = null) {\n        return this.getByName(this.constructor.getName(entity, field));\n    }\n\n    /**\n     * @private\n     * @param entity\n     * @returns {EntitySchema}\n     */\n    getForEntity(entity) {\n        const result = {};\n\n        // get the entity itself\n        const columns = {\n            [ENTITY_PK_FIELD_NAME]: {\n                primary: true,\n                type: 'integer',\n                generated: 'increment',\n                nullable: false,\n            },\n        };\n        const references = [];\n        entity.getFields().forEach(field => {\n            if (field.isReference() && field.isMultiple()) {\n                // collect multiple references, don't create fields for it\n                references.push(field);\n                return;\n            }\n\n            columns[field.getName()] = {\n                type: this.constructor.getDBType(field),\n                nullable: !field.isRequired(),\n                array: field.isMultiple(),\n                length: this.constructor.getDBFieldLength(field),\n            };\n        });\n\n        result[this.constructor.getName(entity)] = new EntitySchema({\n            name: this.constructor.getTableName(entity),\n            columns,\n        });\n\n        // we do not create any fields for many-to-may relation, but make another entity\n        references.forEach(field => {\n            result[this.constructor.getName(entity, field)] = new EntitySchema({\n                name: this.constructor.getReferenceTableName(entity, field),\n                columns: {\n                    [REFERENCE_ENTITY_PARENT_FIELD_NAME]: {\n                        type: 'integer',\n                        nullable: false,\n                        primary: true,\n                    },\n                    [REFERENCE_ENTITY_CHILD_FIELD_NAME]: {\n                        type: 'integer',\n                        nullable: false,\n                        primary: true,\n                    },\n                },\n            });\n        });\n\n        return result;\n    }\n}\n","import { In } from 'typeorm';\nimport {\n    ENTITY_PK_FIELD_NAME,\n    ENTITY_ID_FIELD_NAME,\n} from 'project-minimum-core';\n\nexport class IdMapper {\n    constructor({ connection } = {}) {\n        this.connection = connection;\n\n        this.idToInternal = {};\n        this.idToGet = {};\n        this.entities = {};\n    }\n\n    addId(id, databaseEntity) {\n        if (this.idToInternal[id]) {\n            return;\n        }\n\n        const entityName = databaseEntity.options.name;\n\n        this.entities[entityName] = databaseEntity;\n        this.idToGet[entityName] = this.idToGet[entityName] || [];\n        this.idToGet[entityName].push(id);\n    }\n\n    getInternalId(id) {\n        return this.idToInternal[id] || null;\n    }\n\n    async obtain() {\n        await Promise.all(\n            Object.keys(this.idToGet).map(entityName => {\n                const entity = this.entities[entityName];\n                const repository = this.connection.getRepository(entity);\n                return repository\n                    .find({\n                        where: {\n                            [ENTITY_ID_FIELD_NAME]: In(\n                                this.idToGet[entityName],\n                            ),\n                        },\n                        select: [ENTITY_PK_FIELD_NAME, ENTITY_ID_FIELD_NAME],\n                    })\n                    .then(items => {\n                        items.forEach(item => {\n                            this.idToInternal[item[ENTITY_ID_FIELD_NAME]] =\n                                item[ENTITY_PK_FIELD_NAME];\n                        });\n                    });\n            }),\n        );\n    }\n}\n","/**\n * https://typeorm.io/#/migrations\n */\n\nimport { Table, TableColumn, TableIndex } from 'typeorm';\nimport {\n    DB_TABLE_PREFIX,\n    DB_REF_TABLE_PREFIX,\n    ENTITY_ID_FIELD_NAME,\n    ENTITY_PK_FIELD_NAME,\n    REFERENCE_ENTITY_PARENT_FIELD_NAME,\n    REFERENCE_ENTITY_CHILD_FIELD_NAME,\n} from 'project-minimum-core';\n\nimport EntityManager from './entity-manager';\n\nexport default class Migrator {\n    static async getDelta({ schema, connectionManager } = {}) {\n        const queryRunner = (await connectionManager.getSystem()).createQueryRunner(\n            'master',\n        );\n\n        const tables = this.getTables(queryRunner);\n\n        const tablesToCreate = [];\n        let tableNamesToDrop = [];\n        const tablesToProbablyAlter = [];\n\n        const currentTables = {};\n        const futureTables = {};\n\n        tables.forEach(table => {\n            currentTables[table.name] = table;\n        });\n\n        const entities = schema.getSchema();\n        const tableToEntity = {};\n\n        // tables\n        entities.forEach(entity => {\n            const table = EntityManager.getDDLByEntity(entity);\n            tableToEntity[table.name] = entity;\n            futureTables[table.name] = table;\n            if (!(table.name in currentTables)) {\n                tablesToCreate.push(table);\n            } else {\n                tablesToProbablyAlter.push(table);\n            }\n        });\n        Object.values(currentTables).forEach(table => {\n            if (\n                !(table.name in futureTables) &&\n                !table.name.startsWith(DB_REF_TABLE_PREFIX) // not a reference\n            ) {\n                tableNamesToDrop.push(table.name);\n            }\n        });\n\n        // fields\n        const tablesToAlter = {};\n\n        for (let i = 0; i < tablesToProbablyAlter.length; i += 1) {\n            const futureTable = tablesToProbablyAlter[i];\n            const currentTable = currentTables[futureTable.name];\n\n            const tableFutureFieldNames = Object.keys(\n                futureTable.columns.reduce((result, item) => {\n                    result[item.name] = true;\n                    return result;\n                }, {}),\n            );\n\n            const tableCurrentFieldNames = Object.keys(\n                currentTable.columns.reduce((result, item) => {\n                    result[item.name] = true;\n                    return result;\n                }, {}),\n            );\n\n            const fieldsToAdd = _.difference(\n                tableCurrentFieldNames,\n                tableFutureFieldNames,\n            );\n            const fieldsToDelete = _.difference(\n                tableFutureFieldNames,\n                tableCurrentFieldNames,\n            );\n\n            for (let j = 0; j < futureTable.columns.length; j += 1) {\n                const field = futureTable.columns[j];\n                if (fieldsToAdd.includes(field.name)) {\n                    tablesToAlter[futureTable.name] = tablesToAlter[\n                        futureTable.name\n                    ] || {\n                        add: [],\n                        delete: [],\n                    };\n                    tablesToAlter[futureTable.name].add.push(field);\n                }\n            }\n\n            for (let j = 0; j < currentTable.columns.length; j += 1) {\n                const field = currentTable.columns[j];\n\n                if (\n                    field.name !== ENTITY_PK_FIELD_NAME &&\n                    field.name !== ENTITY_ID_FIELD_NAME\n                ) {\n                    if (fieldsToDelete.includes(field.name)) {\n                        tablesToAlter[currentTable.name] = tablesToAlter[\n                            currentTable.name\n                        ] || {\n                            add: [],\n                            delete: [],\n                        };\n                        tablesToAlter[currentTable.name].delete.push(field);\n                    }\n                }\n            }\n\n            // todo: support altering of fields\n        }\n\n        // references\n        const currentReferences = Object.values(currentTables)\n            .map(table =>\n                table.name.startsWith(DB_REF_TABLE_PREFIX) ? table.name : false,\n            )\n            .filter(x => x);\n\n        const futureReferences = [];\n\n        // find all refs in future tables\n        Object.values(futureTables).forEach(table => {\n            const entity = tableToEntity[table.name];\n            entity.getMultipleReferences().forEach(field => {\n                const referenceTableName = EntityManager.getReferenceTableName(\n                    entity,\n                    field,\n                );\n                futureReferences.push(referenceTableName);\n\n                if (!currentReferences.includes(referenceTableName)) {\n                    tablesToCreate.push({\n                        name: referenceTableName,\n                        columns: [\n                            {\n                                name: REFERENCE_ENTITY_PARENT_FIELD_NAME,\n                                isNullable: false,\n                                isPrimary: true,\n                                type: 'integer',\n                            },\n                            {\n                                name: REFERENCE_ENTITY_CHILD_FIELD_NAME,\n                                isNullable: false,\n                                isPrimary: true,\n                                type: 'integer',\n                            },\n                        ],\n                    });\n                }\n            });\n        });\n\n        tableNamesToDrop = _.union(\n            tableNamesToDrop,\n            _.difference(currentReferences, futureReferences),\n        );\n\n        return {\n            create: tablesToCreate,\n            drop: tableNamesToDrop,\n            alter: tablesToAlter,\n        };\n    }\n\n    static async migrate(params) {\n        const delta = await this.getDelta(params);\n    }\n\n    static async getTables(queryRunner) {\n        const entityTableNames = (await queryRunner.query(\n            `select * from information_schema.tables where table_schema='public' and table_name like '${DB_TABLE_PREFIX}%'`,\n        )).map(t => t.table_name);\n\n        let tables = [];\n        if (entityTableNames.length) {\n            tables = await queryRunner.getTables(entityTableNames);\n        }\n\n        return tables;\n    }\n}\n","/**\n * https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md\n */\n\nimport {\n    DB_QUERY_FIND_MAX_PAGE_SIZE,\n    ENTITY_ID_FIELD_NAME,\n    ENTITY_PK_FIELD_NAME,\n} from 'project-minimum-core';\n\nexport class Query {\n    static make({\n        args,\n        queryBuilder,\n        entity,\n        tableName,\n        parameters = { restrictLimit: true },\n    }) {\n        const { select, filter, sort } = args;\n\n        const tableNameSafe = this.sanitize(tableName);\n\n        const selectSafe = this.prepareSelect(select, entity, {\n            ...parameters,\n            alias: tableNameSafe,\n        });\n        const orderBySafe = this.prepareOrderBy(sort, entity, {\n            ...parameters,\n            alias: tableNameSafe,\n        });\n\n        const { limit, offset } = this.prepareLimitOffset(args, parameters);\n\n        // todo: apply \"where\"\n\n        let query = queryBuilder.select(selectSafe).skip(offset);\n\n        if (orderBySafe) {\n            query = query.orderBy(orderBySafe);\n        }\n\n        if (limit !== null) {\n            query = query.take(limit);\n        }\n\n        return { query, limit };\n    }\n\n    static prepareOrderBy(order, entity, { alias = '' } = {}) {\n        if (!_.ione(order)) {\n            return null;\n        }\n\n        const prefix = alias ? `${alias}.` : '';\n        const legalFields = this.getLegalFields(entity);\n\n        const keys = Object.keys(order).filter(fieldName =>\n            legalFields.includes(fieldName),\n        );\n\n        return keys.reduce(\n            (result, fieldName) => ({\n                [`${prefix}${fieldName}`]: order[fieldName],\n                ...result,\n            }),\n            {},\n        );\n    }\n\n    static prepareLimitOffset(args, parameters = { restrictLimit: true }) {\n        let { limit, offset, page, pageSize } = args;\n\n        limit = parseInt(limit, 10);\n        if (Number.isNaN(limit)) {\n            if (parameters.restrictLimit) {\n                limit = DB_QUERY_FIND_MAX_PAGE_SIZE;\n            } else {\n                limit = null;\n            }\n        }\n\n        offset = parseInt(offset, 10);\n        if (Number.isNaN(offset)) {\n            offset = 0;\n        }\n\n        pageSize = parseInt(pageSize, 10);\n        if (!Number.isNaN(pageSize)) {\n            limit = pageSize;\n\n            page = parseInt(page, 10);\n            if (!Number.isNaN(page)) {\n                offset = (page - 1) * pageSize;\n            }\n        }\n\n        return { limit, offset };\n    }\n\n    static prepareSelect(fields, entity, { alias = '' } = {}) {\n        const prefix = alias ? `${alias}.` : '';\n        const toSelect = _.intersection(\n            fields,\n            this.getLegalFields(entity),\n        ).map(fieldName => `${prefix}${fieldName}`);\n\n        if (!toSelect.includes(`${prefix}${ENTITY_PK_FIELD_NAME}`)) {\n            toSelect.push(`${prefix}${ENTITY_PK_FIELD_NAME}`);\n        }\n        if (!toSelect.includes(`${prefix}${ENTITY_ID_FIELD_NAME}`)) {\n            toSelect.push(`${prefix}${ENTITY_ID_FIELD_NAME}`);\n        }\n\n        return toSelect;\n    }\n\n    static getLegalFields(entity) {\n        return entity\n            .getFields()\n            .filter(field => !(field.isReference() && field.isMultiple()))\n            .map(field => field.getName());\n    }\n\n    static sanitize(value) {\n        return value.replace(/[^a-zA-Z0-9_]/g, '');\n    }\n}\n","const useErrorHandler = app => {\n    // catching async unhandled rejections\n    process\n        .on('unhandledRejection', err => {\n            logger.error('Unhandled rejection', err);\n        })\n        .on('uncaughtException', err => {\n            logger.error('Uncaught exception', err);\n        });\n\n    // catching normal unhandled exceptions\n    app.use((err, req, res, next) => {\n        logger.error('Uncaught exception', err);\n        res.send('Nasty error'); // todo: explain here\n    });\n};\n\nexport default useErrorHandler;\n","import { ApolloServer } from 'apollo-server-express';\nimport { renderPlaygroundPage } from '@apollographql/graphql-playground-html';\nimport accepts from 'accepts';\nimport { mergeTypes, mergeResolvers } from 'merge-graphql-schemas';\nimport uuid from 'uuid/v4';\n\nimport { graphqlExpress } from './graphql-express';\nimport SchemaService from '../../service/schema';\nimport GQLTypeGenerator from './type-generator';\nimport ResolverGenerator from './resolver-generator';\nimport DatabaseEntityManager from '../database/entity-manager';\nimport DataLoaderPool from '../database/data-loader-pool';\n\nimport typeDefs from '../../graphql/types';\nimport resolvers from '../../graphql/resolvers';\n\nlet server = null;\n\nconst getServer = async ({ cache, connectionManager }) => {\n    if (!server || !(await cache.get('apollo.server.ready'))) {\n        if (server) {\n            await server.stop();\n            await connectionManager.close();\n        }\n\n        const schema = await SchemaService.load('actual', connectionManager);\n        const databaseEntityManager = new DatabaseEntityManager(schema);\n\n        const connection = await connectionManager.get({\n            entities: Object.values(await databaseEntityManager.get()),\n            preConnect: true,\n        });\n\n        const entityTypeDefs = GQLTypeGenerator.make(schema);\n        const eResolver = ResolverGenerator.make(\n            schema,\n            databaseEntityManager,\n            connection,\n        );\n\n        // now everything is ready to create the server\n        server = new ApolloServer({\n            typeDefs: mergeTypes([...entityTypeDefs, ...typeDefs], {\n                all: true,\n            }),\n            resolvers: mergeResolvers([...eResolver, ...resolvers]),\n            context: async ({ req, res }) => {\n                return {\n                    requestId: uuid(),\n                    dataLoaderPool: new DataLoaderPool(),\n                };\n            },\n            debug: __DEV__,\n        });\n\n        await cache.set('apollo.server.ready', true, ['apollo']);\n    }\n\n    return server;\n};\n\nconst useGraphQL = (app, params = {}) => {\n    // server.applyMiddleware({ app, cors: false });\n\n    app.use('/graphql', async (req, res, next) => {\n        if (__DEV__ && req.method === 'GET') {\n            const accept = accepts(req);\n            const types = accept.types();\n            const prefersHTML =\n                types.find(\n                    x => x === 'text/html' || x === 'application/json',\n                ) === 'text/html';\n\n            if (prefersHTML) {\n                res.setHeader('Content-Type', 'text/html');\n                const playground = renderPlaygroundPage({\n                    endpoint: '/graphql',\n                });\n\n                return res.send(playground);\n            }\n        }\n\n        const serverInstance = await getServer(params);\n        return graphqlExpress(() => {\n            return serverInstance.createGraphQLServerOptions(req, res);\n        })(req, res, next);\n    });\n};\n\nexport default useGraphQL;\n","export const getASTAt = (ast, path = '') => {\n    if (!ast || !ast.fieldNodes || !ast.fieldNodes[0]) {\n        return null;\n    }\n\n    let node = ast.fieldNodes[0];\n\n    if (path.length) {\n        path = path.split('.');\n\n        let i = 0;\n        for (; i < path.length; i += 1) {\n            if (node.selectionSet && node.selectionSet.selections) {\n                node = node.selectionSet.selections.find(\n                    f => f.name.value === path[i],\n                );\n            } else {\n                break;\n            }\n        }\n\n        if (i === path.length) {\n            // found\n            return node;\n        }\n\n        return null;\n    }\n\n    return node || null;\n};\n\nexport const getSelectionAt = (ast, path = '') => {\n    try {\n        return getASTAt(ast, path).selectionSet.selections.map(\n            field => field.name.value,\n        );\n    } catch (e) {\n        return {};\n    }\n};\n","import { runHttpQuery, convertNodeHttpToRequest } from 'apollo-server-core';\n\nexport function graphqlExpress(options) {\n    if (!options) {\n        throw new Error('Apollo Server requires options.');\n    }\n\n    if (arguments.length > 1) {\n        // TODO: test this\n        throw new Error(\n            `Apollo Server expects exactly one argument, got ${\n                arguments.length\n            }`,\n        );\n    }\n\n    return (req, res, next) => {\n        runHttpQuery([req, res], {\n            method: req.method,\n            options: options,\n            query: req.method === 'POST' ? req.body : req.query,\n            request: convertNodeHttpToRequest(req),\n        }).then(\n            ({ graphqlResponse, responseInit }) => {\n                if (responseInit.headers) {\n                    for (const [name, value] of Object.entries(\n                        responseInit.headers,\n                    )) {\n                        res.setHeader(name, value);\n                    }\n                }\n                res.write(graphqlResponse);\n                res.end();\n            },\n            error => {\n                if ('HttpQueryError' !== error.name) {\n                    return next(error);\n                }\n\n                if (error.headers) {\n                    for (const [name, value] of Object.entries(error.headers)) {\n                        res.setHeader(name, value);\n                    }\n                }\n\n                res.statusCode = error.statusCode;\n                res.write(error.message);\n                res.end();\n            },\n        );\n    };\n}\n","/**\n * https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md\n */\n\nimport { In, Like } from 'typeorm';\nimport uuid from 'uuid/v4';\nimport {\n    FIELD_TYPE_DATETIME,\n    DB_QUERY_FIND_MAX_PAGE_SIZE,\n    ENTITY_ID_FIELD_NAME,\n    ENTITY_PK_FIELD_NAME,\n} from 'project-minimum-core';\nimport { getASTAt, getSelectionAt } from './ast';\nimport { IdMapper } from '../database/id-mapper';\nimport { Query } from '../database/query';\n\nexport default class ResolverGenerator {\n    static make(schema, databaseEntityManager, connection) {\n        const entities = Object.values(schema.getSchema());\n\n        return entities.map(entity =>\n            this.makeForEntity(\n                entity,\n                schema,\n                databaseEntityManager,\n                connection,\n            ),\n        );\n    }\n\n    static makeGetForEntity(entity, schema, databaseEntityManager, connection) {\n        const databaseEntity = databaseEntityManager.getByDefinition(entity);\n\n        return async (source, args, context, info) => {\n            const result = {\n                errors: [],\n                data: null,\n            };\n\n            const { id } = args;\n\n            if (!_.isne(id)) {\n                result.errors.push({\n                    code: `${ENTITY_ID_FIELD_NAME}_missing`,\n                    message: `Argument \"${ENTITY_ID_FIELD_NAME}\" is missing in the request`,\n                });\n                return result;\n            }\n\n            const selectedFields = getSelectionAt(info, 'data');\n            const repository = connection.getRepository(databaseEntity);\n\n            let dbItem = null;\n            await this.wrap(async () => {\n                dbItem = await repository.findOne({\n                    where: {\n                        [ENTITY_ID_FIELD_NAME]: id.trim(),\n                    },\n                    select: Query.prepareSelect(selectedFields, entity),\n                });\n            }, result.errors);\n\n            if (!result.errors.length) {\n                if (!dbItem) {\n                    result.errors.push({\n                        code: 'not_found',\n                        message: 'Element not found',\n                    });\n                }\n            }\n\n            if (dbItem) {\n                result.data = this.convertToPlain(dbItem, entity);\n            }\n\n            return result;\n        };\n    }\n\n    static makeFindForEntity(\n        entity,\n        schema,\n        databaseEntityManager,\n        connection,\n    ) {\n        const databaseEntity = databaseEntityManager.getByDefinition(entity);\n\n        return async (source, args, context, info) => {\n            const result = {\n                errors: [],\n                data: [],\n                limit: DB_QUERY_FIND_MAX_PAGE_SIZE,\n                offset: 0,\n            };\n\n            const { filter, search, sort } = args;\n\n            const { limit, offset } = Query.prepareLimitOffset(args);\n            if (limit > DB_QUERY_FIND_MAX_PAGE_SIZE) {\n                result.errors.push({\n                    code: 'limit_too_high',\n                    message: 'Limit too high',\n                });\n\n                return result;\n            }\n            result.limit = limit;\n            result.offset = offset;\n\n            if (filter !== undefined && search !== undefined) {\n                result.errors.push({\n                    code: 'search_filter_conflict',\n                    message:\n                        'You can not set both search and filter at the same time',\n                });\n                return result;\n            }\n\n            const selectedFields = getSelectionAt(info, 'data');\n            const repository = connection.getRepository(databaseEntity);\n\n            const where = this.makeWhereFind(filter, search);\n\n            await this.wrap(async () => {\n                result.data = (await repository.find({\n                    select: Query.prepareSelect(selectedFields, entity),\n                    where,\n                    order: Query.prepareOrderBy(sort, entity),\n                    skip: offset,\n                    take: limit,\n                })).map(item => this.convertToPlain(item, entity));\n            }, result.errors);\n\n            if (getASTAt(info, 'count')) {\n                // count asked\n                await this.wrap(async () => {\n                    result.count = await repository.count({\n                        where,\n                    });\n                }, result.errors);\n            }\n\n            return result;\n        };\n    }\n\n    static makePutForEntity(entity, schema, databaseEntityManager, connection) {\n        const databaseEntity = databaseEntityManager.getByDefinition(entity);\n\n        return async (source, args) => {\n            const result = {\n                errors: [],\n                [ENTITY_ID_FIELD_NAME]: null,\n                data: {},\n            };\n\n            let { id, data } = args;\n\n            const repository = connection.getRepository(databaseEntity);\n            delete data[ENTITY_ID_FIELD_NAME]; // there is no way to set the id manually\n\n            let isNewItem = false;\n            if (typeof id !== 'string' || !id.length) {\n                id = uuid();\n                data[ENTITY_ID_FIELD_NAME] = id;\n                isNewItem = true;\n            }\n\n            // cast everything that is possible to cast\n            data = entity.castData(data);\n            // then validate\n\n            const errors = await entity.validateData(data);\n            if (errors) {\n                result.errors = errors.map(error => ({\n                    message: error.message,\n                    code: 'validation',\n                    reference: error.fieldName,\n                }));\n\n                return result;\n            }\n\n            const singleReferences = entity.getSingleReferences();\n\n            await this.wrap(async () => {\n                const idToInternal = new IdMapper({\n                    connection,\n                });\n\n                // translate all single-reference codes to ids\n                for (let i = 0; i < singleReferences.length; i += 1) {\n                    const {\n                        referenceFieldName,\n                        referencedDatabaseEntity,\n                    } = this.getReferenceAttributes(\n                        singleReferences[i],\n                        databaseEntityManager,\n                        entity,\n                        schema,\n                    );\n                    if (referenceFieldName in data) {\n                        idToInternal.addId(\n                            data[referenceFieldName],\n                            referencedDatabaseEntity,\n                        );\n                    }\n                }\n\n                await idToInternal.obtain();\n\n                for (let i = 0; i < singleReferences.length; i += 1) {\n                    const reference = singleReferences[i];\n                    const referenceFieldName = reference.getName();\n\n                    if (referenceFieldName in data) {\n                        data[referenceFieldName] = idToInternal.getInternalId(\n                            data[referenceFieldName],\n                        );\n                    }\n                }\n\n                let databaseItem = null;\n                if (isNewItem) {\n                    databaseItem = repository.create(data);\n                } else {\n                    // find id by code\n                    databaseItem = await repository.findOne({\n                        where: {\n                            [ENTITY_ID_FIELD_NAME]: id.trim(),\n                        },\n                        select: [ENTITY_PK_FIELD_NAME],\n                    });\n                    if (!databaseItem) {\n                        result.errors.push({\n                            code: 'not_found',\n                            message: 'Element not found',\n                        });\n                        return;\n                    }\n                    repository.merge(databaseItem, data);\n                }\n\n                await repository.save(databaseItem);\n                await this.manageMultipleReferences({\n                    entity,\n                    databaseEntityManager,\n                    connection,\n                    [ENTITY_PK_FIELD_NAME]: databaseItem[ENTITY_PK_FIELD_NAME],\n                    data,\n                    schema,\n                });\n\n                result[ENTITY_ID_FIELD_NAME] = id;\n                result.data = this.convertToPlain(databaseItem, entity);\n            }, result.errors);\n\n            return result;\n        };\n    }\n\n    static makeDeleteForEntity(\n        entity,\n        schema,\n        databaseEntityManager,\n        connection,\n    ) {\n        const databaseEntity = databaseEntityManager.getByDefinition(entity);\n\n        return async (source, args) => {\n            const result = {\n                errors: [],\n                [ENTITY_ID_FIELD_NAME]: null,\n                data: {},\n            };\n\n            const { id } = args;\n\n            if (typeof id !== 'string' || !id.length) {\n                result.errors.push({\n                    code: 'illegal_id',\n                    message: 'Id is illegal',\n                });\n\n                return result;\n            }\n\n            result[ENTITY_ID_FIELD_NAME] = id;\n\n            const repository = connection.getRepository(databaseEntity);\n\n            const item = await repository.findOne({\n                where: { [ENTITY_ID_FIELD_NAME]: id.trim() },\n                select: [ENTITY_PK_FIELD_NAME],\n            });\n            if (!item) {\n                result.errors.push({\n                    code: 'not_found',\n                    message: 'Element not found',\n                });\n            } else {\n                const idInternal = repository.getId(item);\n                await this.wrap(async () => {\n                    await repository.delete(idInternal);\n                }, result.errors);\n\n                // drop reference data\n                const references = entity.getMultipleReferences();\n\n                for (let i = 0; i < references.length; i += 1) {\n                    const referenceField = references[i];\n                    const {\n                        // referenceFieldName,\n                        referenceTableName,\n                        referenceDatabaseEntity,\n                        // referencedDatabaseEntity,\n                    } = this.getReferenceAttributes(\n                        referenceField,\n                        databaseEntityManager,\n                        entity,\n                        schema,\n                    );\n\n                    const referenceRepository = connection.getRepository(\n                        referenceDatabaseEntity,\n                    );\n                    const referenceQueryBuilder = referenceRepository.createQueryBuilder(\n                        referenceTableName,\n                    );\n\n                    // delete all\n                    // eslint-disable-next-line no-await-in-loop\n                    await referenceQueryBuilder\n                        .delete()\n                        .from(referenceTableName)\n                        .where('self = :id', { id })\n                        .execute();\n                }\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     *\n     * @param entity\n     * @param schema\n     * @param databaseEntityManager\n     * @param connection\n     * @returns {*}\n     */\n    static makeForEntity(entity, schema, databaseEntityManager, connection) {\n        const name = entity.getCamelName();\n        return {\n            Query: {\n                [`${name}Get`]: this.makeGetForEntity(\n                    entity,\n                    schema,\n                    databaseEntityManager,\n                    connection,\n                ),\n                [`${name}Find`]: this.makeFindForEntity(\n                    entity,\n                    schema,\n                    databaseEntityManager,\n                    connection,\n                ),\n            },\n            Mutation: {\n                [`${name}Put`]: this.makePutForEntity(\n                    entity,\n                    schema,\n                    databaseEntityManager,\n                    connection,\n                ),\n                [`${name}Delete`]: this.makeDeleteForEntity(\n                    entity,\n                    schema,\n                    databaseEntityManager,\n                    connection,\n                ),\n            },\n            [name]: this.makeReferenceResolversForEntity(\n                entity,\n                schema,\n                databaseEntityManager,\n                connection,\n            ),\n        };\n    }\n\n    static async manageMultipleReferences({\n        entity,\n        databaseEntityManager,\n        schema,\n        connection,\n        idInternal,\n        data,\n    }) {\n        const references = entity.getMultipleReferences();\n\n        for (let i = 0; i < references.length; i += 1) {\n            const referenceField = references[i];\n            const {\n                referenceFieldName,\n                referenceTableName,\n                referenceDatabaseEntity,\n                referencedDatabaseEntity,\n            } = this.getReferenceAttributes(\n                referenceField,\n                databaseEntityManager,\n                entity,\n                schema,\n            );\n\n            if (referenceFieldName in data) {\n                const ids = [];\n                const values = data[referenceFieldName];\n\n                if (Array.isArray(values) && values.length) {\n                    const idMapper = new IdMapper({\n                        connection,\n                    });\n                    values.forEach(idItem =>\n                        idMapper.addId(idItem, referencedDatabaseEntity),\n                    );\n\n                    // eslint-disable-next-line no-await-in-loop\n                    await idMapper.obtain();\n\n                    values.forEach(idItem =>\n                        ids.push(idMapper.getInternalId(idItem)),\n                    );\n                }\n\n                const referenceRepository = connection.getRepository(\n                    referenceDatabaseEntity,\n                );\n                const referenceQueryBuilder = referenceRepository.createQueryBuilder(\n                    referenceTableName,\n                );\n\n                // delete all\n                // eslint-disable-next-line no-await-in-loop\n                await referenceQueryBuilder\n                    .delete()\n                    .from(referenceTableName)\n                    .where('self = :id', { idInternal })\n                    .execute();\n\n                // and re-create\n                if (ids.length) {\n                    // eslint-disable-next-line no-await-in-loop\n                    await referenceQueryBuilder\n                        .insert()\n                        .into(referenceTableName)\n                        .values(\n                            ids.map(referenceId => ({\n                                self: idInternal,\n                                rel: referenceId,\n                            })),\n                        )\n                        .execute();\n                }\n            }\n        }\n    }\n\n    static makeReferenceResolversForEntity(\n        entity,\n        schema,\n        databaseEntityManager,\n        connection,\n    ) {\n        const resolvers = {};\n\n        // get all references\n        const references = entity.getReferences();\n        if (!references.length) {\n            return resolvers;\n        }\n\n        const args = {\n            entity,\n            schema,\n            databaseEntityManager,\n            connection,\n        };\n\n        references.forEach(referenceField => {\n            resolvers[referenceField.getName()] = referenceField.isMultiple()\n                ? this.makeReferenceResolverMultiple({\n                      referenceField,\n                      ...args,\n                  })\n                : this.makeReferenceResolverSingle({ referenceField, ...args });\n        });\n\n        return resolvers;\n    }\n\n    static makeReferenceResolverSingle({\n        referenceField,\n        entity,\n        databaseEntityManager,\n        schema,\n        connection,\n    }) {\n        return async (source, args, { dataLoaderPool }, info) => {\n            const referenceFieldName = referenceField.getName();\n\n            // check if the parent item data does not have any value that we can reference with\n            const referenceValue = source[referenceFieldName];\n            if (!parseInt(referenceValue, 10)) {\n                return null;\n            }\n\n            const {\n                referencedDatabaseEntity,\n                referencedEntityName,\n            } = this.getReferenceAttributes(\n                referenceField,\n                databaseEntityManager,\n                entity,\n                schema,\n            );\n\n            const selectedFields = getSelectionAt(info);\n            const select = Query.prepareSelect(selectedFields, entity);\n            const referencedRepository = connection.getRepository(\n                referencedDatabaseEntity,\n            );\n\n            const key = `${referencedEntityName}__${select.join('.')}`;\n            const loader = dataLoaderPool.get(key, async ids => {\n                const errors = [];\n                const map = {};\n\n                try {\n                    const items = await referencedRepository.find({\n                        where: {\n                            idInternal: In(ids),\n                        },\n                        select,\n                    });\n\n                    items.forEach(item => {\n                        map[item.idInternal] = item;\n                    });\n                } catch (e) {\n                    errors.push({\n                        code: 'internal',\n                        message: __DEV__ ? e.message : 'Internal error',\n                    });\n                    logger.error('Unable to fetch some items', e);\n                }\n\n                // maintain the right order\n                return ids.map(id => ({\n                    item: id in map ? map[id] : null,\n                    errors,\n                }));\n            });\n\n            const item = await loader.load(referenceValue);\n            if (item.errors.length) {\n                return null;\n            }\n\n            return item.item;\n        };\n    }\n\n    static makeReferenceResolverMultiple({\n        referenceField,\n        entity,\n        databaseEntityManager,\n        schema,\n        connection,\n    }) {\n        return async (source, args, context, info) => {\n            // check if the parent item data does not have any value that we can reference with\n            const referenceValue = source[ENTITY_PK_FIELD_NAME];\n            if (!parseInt(referenceValue, 10)) {\n                return [];\n            }\n\n            const {\n                referenceFieldName,\n                referenceTableName,\n                referencedDatabaseEntity,\n                referencedTableName,\n                referencedEntity,\n            } = this.getReferenceAttributes(\n                referenceField,\n                databaseEntityManager,\n                entity,\n                schema,\n            );\n\n            const referencedRepository = connection.getRepository(\n                referencedDatabaseEntity,\n            );\n            const referencedQueryBuilder = referencedRepository.createQueryBuilder();\n\n            let { query } = Query.make({\n                args: { ...args, select: getSelectionAt(info) },\n                queryBuilder: referencedQueryBuilder,\n                entity: referencedEntity,\n                tableName: referencedTableName,\n                parameters: {\n                    restrictLimit: false,\n                },\n            });\n\n            // todo: this kind of query can be batched in some cases\n            // const canBatch =\n            //     typeof limit === 'undefined' && typeof offset === 'undefined';\n\n            let items = [];\n            const errors = [];\n\n            try {\n                const referencedTableNameSafe = Query.sanitize(\n                    referencedTableName,\n                );\n                const referenceFieldNameSafe = Query.sanitize(\n                    referenceFieldName,\n                );\n\n                query = query\n                    // filter by the relation\n                    .innerJoinAndSelect(\n                        referenceTableName,\n                        referenceFieldName,\n                        `${referenceFieldNameSafe}.rel = ${referencedTableNameSafe}.${ENTITY_PK_FIELD_NAME} and ${referenceFieldNameSafe}.self = :referenceValue`,\n                        { referenceValue },\n                    );\n\n                items = await query.getMany();\n                // items = await query.getRawMany();\n            } catch (e) {\n                errors.push({\n                    code: 'internal',\n                    message: __DEV__ ? e.message : 'Internal error',\n                });\n                logger.error('Internal error', e);\n            }\n\n            if (errors.length) {\n                return [];\n            }\n\n            return items;\n        };\n    }\n\n    static async wrap(fn, errors) {\n        try {\n            await fn();\n        } catch (e) {\n            errors.push({\n                code: 'internal',\n                message: __DEV__ ? e.message : 'Internal error',\n            });\n            logger.error('Internal error', e);\n        }\n    }\n\n    static makeWhereFind(filter, search) {\n        const where = {};\n\n        if (_.isne(search)) {\n            // a very basic type of search - by the part of code\n            where[ENTITY_ID_FIELD_NAME] = Like(\n                `%${search.replace(/[^a-zA-Z0-9_-]/, '')}%`,\n            );\n        }\n\n        return where;\n    }\n\n    static convertToPlain(dbItem, entity) {\n        const plain = {};\n        entity.getFields().forEach(field => {\n            const fieldName = field.getName();\n            const fieldType = field.getActualType();\n            const multiple = field.isMultiple();\n            const fieldValue = dbItem[fieldName];\n            if (typeof fieldValue !== 'undefined' && fieldValue !== null) {\n                // todo: probably, apollo server is capable of casting Date to String by it's own?\n                if (fieldType === FIELD_TYPE_DATETIME) {\n                    if (multiple) {\n                        plain[fieldName] = fieldValue.map(subItem =>\n                            subItem instanceof Date\n                                ? subItem.toISOString()\n                                : null,\n                        );\n                    } else {\n                        plain[fieldName] =\n                            fieldValue instanceof Date\n                                ? fieldValue.toISOString()\n                                : null;\n                    }\n                } else {\n                    plain[fieldName] = fieldValue;\n                }\n            } else if (fieldName in dbItem) {\n                plain[fieldName] = null;\n            }\n        });\n\n        // plus id, always there\n        if (ENTITY_PK_FIELD_NAME in dbItem) {\n            plain[ENTITY_PK_FIELD_NAME] = dbItem[ENTITY_PK_FIELD_NAME];\n        }\n\n        return plain;\n    }\n\n    static getReferenceAttributes(\n        referenceField,\n        databaseEntityManager,\n        entity,\n        schema,\n    ) {\n        // the name of the field we use to access this relation (e.g. \"partner\" or \"pets\")\n        const referenceFieldName = referenceField.getName();\n\n        // ///////////////////////////////////////\n        // ReferencED entity\n        // the database entity name, which we make a reference to (e.g. \"person\" or \"pet\")\n        const referencedEntityName = referenceField.getReferencedEntityName();\n        // the referenced schema entity\n        const referencedEntity = schema.getEntity(referencedEntityName);\n        // the referenced database entity\n        const referencedDatabaseEntity = databaseEntityManager.getByName(\n            referencedEntityName,\n        );\n        // the table name of the referenced database entity (e.g. \"eq_e_person\" or \"eq_e_pet\")\n        const referencedTableName = databaseEntityManager.constructor.getTableName(\n            referencedEntity,\n        );\n\n        // ///////////////////////////////////////\n        // Reference entity (only for multiple)\n        let referenceEntityName = null;\n        // a database entity that is represented by this table\n        let referenceDatabaseEntity = null;\n        // a table we use to store multiple references\n        let referenceTableName = null;\n        if (referenceField.isMultiple()) {\n            referenceEntityName = databaseEntityManager.constructor.getName(\n                entity,\n                referenceField,\n            );\n\n            referenceTableName = databaseEntityManager.constructor.getReferenceTableName(\n                entity,\n                referenceField,\n            );\n\n            // we need to get a database entity by its name\n            referenceDatabaseEntity = databaseEntityManager.getByName(\n                databaseEntityManager.constructor.getName(\n                    entity,\n                    referenceField,\n                ),\n            );\n        }\n\n        return {\n            referenceFieldName,\n\n            referencedEntity,\n            referencedEntityName,\n            referencedDatabaseEntity,\n            referencedTableName,\n\n            referenceEntityName,\n            referenceDatabaseEntity,\n            referenceTableName,\n        };\n    }\n}\n","import {\n    FIELD_TYPE_STRING,\n    FIELD_TYPE_BOOLEAN,\n    FIELD_TYPE_DATETIME,\n    FIELD_TYPE_INTEGER,\n    ENTITY_ID_FIELD_NAME,\n} from 'project-minimum-core';\n\nexport default class TypeGenerator {\n    static make(schema) {\n        const entities = Object.values(schema.getSchema());\n        if (!entities.length) {\n            return [];\n        }\n\n        return entities.map(entity => this.makeForEntity(entity, schema));\n    }\n\n    /**\n     * @private\n     * @param entity\n     * @param schema\n     * @returns {string}\n     */\n    static makeForEntity(entity, schema) {\n        const name = entity.getCamelName();\n\n        const tFields = [];\n        const iFields = [];\n        const fFields = [];\n        const sFields = [];\n        entity.getFields().forEach(field => {\n            tFields.push(\n                `${this.getQueryFieldName(\n                    field,\n                    schema,\n                )}: ${this.getGQLFieldType(field, schema)}`,\n            );\n            const fieldName = field.getName();\n            if (fieldName !== ENTITY_ID_FIELD_NAME) {\n                // code is a read-only field\n                iFields.push(\n                    `${field.getName()}: ${this.getGQLFieldType(\n                        field,\n                        schema,\n                        true,\n                    )}${false && field.isRequired() ? '!' : ''}`,\n                );\n            }\n            fFields.push(`${fieldName}: IFilterFieldValue`);\n            sFields.push(`${fieldName}: SortOrder`);\n        });\n\n        return `\ntype ${name}Result {\n    errors: [Error]\n    data: ${name}\n}\n\ntype ${name}SearchResult {\n    errors: [Error]\n    data: [${name}]!\n    limit: Int!\n    offset: Int!\n    count: Int\n}\n\ntype ${name} {\n${tFields.map(x => `    ${x}`).join('\\n')}\n}\n\ninput I${name} {\n${iFields.map(x => `    ${x}`).join('\\n')}\n}\n\ninput I${name}Filter {\n    SYSLogic: FilterLogic\n    SYSSubFilter: [I${name}Filter]\n${fFields.map(x => `    ${x}`).join('\\n')}\n}\n\ninput I${name}Sort {\n${sFields.map(x => `    ${x}`).join('\\n')}\n}\n\ntype Query {\n    ${name}Get(${ENTITY_ID_FIELD_NAME}: String!): ${name}Result\n    ${name}Find(\n        filter: I${name}Filter\n        search: String\n        sort: I${name}Sort\n        limit: Int\n        offset: Int\n        page: Int\n        pageSize: Int\n        count: Boolean\n    ): ${name}SearchResult\n}\n\ntype Mutation {\n    ${name}Delete(${ENTITY_ID_FIELD_NAME}: String!): ${name}Result\n    ${name}Put(${ENTITY_ID_FIELD_NAME}: String, data: I${name}!): ${name}Result\n}\n        `;\n    }\n\n    static getGQLFieldType(field, schema, input = false) {\n        let gqlType = 'String';\n        if (field.isReference()) {\n            // reference, for input we accept codes, for types - just put type\n            if (input) {\n                gqlType = 'String';\n            } else {\n                const referencedEntityName = field.getReferencedEntityName();\n                const referencedEntity = schema.getEntity(referencedEntityName);\n                gqlType = referencedEntity.getCamelName();\n            }\n        } else {\n            const type = field.getActualType();\n            switch (type) {\n                case FIELD_TYPE_STRING:\n                    gqlType = 'String';\n                    break;\n                case FIELD_TYPE_INTEGER:\n                    gqlType = 'Int';\n                    break;\n                case FIELD_TYPE_DATETIME:\n                    gqlType = 'String';\n                    break;\n                case FIELD_TYPE_BOOLEAN:\n                    gqlType = 'Boolean';\n                    break;\n                default:\n                    gqlType = 'String';\n            }\n        }\n\n        if (field.isMultiple()) {\n            gqlType = `[${gqlType}]`;\n        }\n\n        return gqlType;\n    }\n\n    static getQueryFieldName(field, schema) {\n        if (field.isReference() && field.isMultiple()) {\n            const referencedEntityName = field.getReferencedEntityName();\n            const referencedEntity = schema.getEntity(referencedEntityName);\n            const referencedEntityNameCamel = referencedEntity.getCamelName();\n            return `${field.getName()}(\n                filter: I${referencedEntityNameCamel}Filter\n                sort: I${referencedEntityNameCamel}Sort\n                limit: Int\n                offset: Int\n                page: Int\n                pageSize: Int\n                count: Int\n            )`;\n        }\n\n        return field.getName();\n    }\n}\n","import isObject from 'lodash.isobject';\n// const random = require('lodash.random');\n// const isNumber = require('lodash.isnumber');\nimport union from 'lodash.union';\nimport intersection from 'lodash.intersection';\nimport difference from 'lodash.difference';\nimport get from 'lodash.get';\nimport cloneDeep from 'lodash.clonedeep';\n// const deepFreeze = require('deep-freeze-node');\n// const isEqual = require('lodash.isequal');\n\nexport default {\n    isArray: Array.isArray,\n    isObject,\n    isFunction: arg => typeof arg === 'function',\n    union,\n    intersection,\n    difference,\n    cloneDeep,\n    get,\n    iane: arg => {\n        return Array.isArray(arg) && arg.length > 0;\n    },\n    ione: arg => {\n        return isObject(arg) && Object.keys(arg).length > 0;\n    },\n    isne: arg => {\n        return typeof arg === 'string' && !!arg.length;\n    },\n};\n","import { Express, Response, Request } from 'express';\nimport { wrapError } from 'ew-internals';\nimport { getVaultFor, hasVaultFor } from './vault';\nimport { getValidator, filterStructure } from './dto-compiler';\n\nimport { ResultError, StringMap } from './type';\n\nexport class Result {\n    public data?: any = null;\n    public errors: ResultError[] = [];\n    public status?: number = null;\n\n    public toJSON(): object {\n        return {\n            data: this.data,\n            errors: this.errors,\n        };\n    }\n}\n\nexport const ERROR_INTERNAL = 'internal';\nexport const ERROR_REQUEST = 'request';\n\nexport const useMSC = (\n    app: Express,\n    controllers: Function[],\n    runtimeParameters: StringMap = { connectionManager: null },\n) => {\n    controllers.forEach((controller: Function) => {\n        if (!hasVaultFor(controller)) {\n            return;\n        }\n\n        const { endpoint: rootEndpoint, methods } = getVaultFor(controller);\n        if (_.isne(rootEndpoint) && _.ione(methods)) {\n            Object.keys(methods).forEach((methodName: string) => {\n                const methodRecord: StringMap = methods[methodName];\n\n                const {\n                    method,\n                    fn,\n                    endpoint = '',\n                    bodyDTO,\n                    outputDTO,\n                } = methodRecord;\n                if (!_.isne(method) && !_.isFunction(fn)) {\n                    return;\n                }\n\n                app[method](\n                    `${rootEndpoint}/${endpoint}`,\n                    wrapError(async (req: Request, res: Response) => {\n                        const errors: ResultError[] = [];\n                        if (bodyDTO) {\n                            const validator = getValidator(bodyDTO);\n                            if (validator) {\n                                try {\n                                    // @ts-ignore\n                                    await validator.validate(req.body, {\n                                        abortEarly: false,\n                                    });\n                                    req.body = filterStructure(\n                                        req.body,\n                                        bodyDTO,\n                                    );\n                                } catch (e) {\n                                    e.inner.forEach((error: Error) => {\n                                        errors.push({\n                                            message: error.message,\n                                            code: 'validation',\n                                            type: ERROR_REQUEST,\n                                        });\n                                    });\n                                }\n                            }\n                        }\n\n                        let result = null;\n                        if (errors.length) {\n                            result = new Result();\n                            result.errors = errors;\n                        } else {\n                            result = await fn(req.params || {}, {\n                                req,\n                                res,\n                                body: req.body,\n                                headers: req.headers,\n                                runtime: runtimeParameters,\n                            });\n                        }\n\n                        let status = 200;\n                        if (result instanceof Result) {\n                            if (result.status) {\n                                // eslint-disable-next-line prefer-destructuring\n                                status = result.status;\n                            } else if (\n                                result.errors.find(\n                                    error => error.type === ERROR_INTERNAL,\n                                )\n                            ) {\n                                status = 500;\n                            } else if (\n                                result.errors.find(\n                                    error => error.type === ERROR_REQUEST,\n                                )\n                            ) {\n                                status = 400;\n                            }\n\n                            if (outputDTO) {\n                                result.data = filterStructure(\n                                    result.data,\n                                    outputDTO,\n                                );\n                            }\n                        }\n                        res.status(status);\n\n                        const headers = res.getHeaders();\n                        if (!('Content-Type' in headers)) {\n                            res.header('Content-Type', 'application/json');\n                        }\n\n                        return res.send(JSON.stringify(result));\n                    }),\n                );\n            });\n        }\n    });\n};\n","import { PropertyDescriptor, StringMap } from './type';\nimport { getVaultFor, hasVaultFor } from './vault';\n\nexport const Endpoint = (endpoint: string): Function => {\n    return (constructor: Function) => {\n        const vault = getVaultFor(constructor);\n        vault.endpoint = endpoint;\n\n        return constructor;\n    };\n};\n\nexport const Get = (endpoint?: string): Function => {\n    return (\n        target,\n        property: string,\n        descriptor: PropertyDescriptor,\n    ): PropertyDescriptor => {\n        const vault = getVaultFor(target.constructor);\n        vault.methods = vault.methods || {};\n        vault.methods[property] = vault.methods[property] || {};\n        Object.assign(vault.methods[property], {\n            endpoint,\n            method: 'get',\n            fn: descriptor.value,\n        });\n\n        return descriptor;\n    };\n};\n\nexport const Post = (endpoint?: string): Function => {\n    return (\n        target,\n        property: string,\n        descriptor: PropertyDescriptor,\n    ): PropertyDescriptor => {\n        const vault = getVaultFor(target.constructor);\n        vault.methods = vault.methods || {};\n        vault.methods[property] = vault.methods[property] || {};\n        Object.assign(vault.methods[property], {\n            endpoint,\n            method: 'post',\n            fn: descriptor.value,\n        });\n\n        return descriptor;\n    };\n};\n\nexport const Put = (endpoint?: string): Function => {\n    return (\n        target,\n        property: string,\n        descriptor: PropertyDescriptor,\n    ): PropertyDescriptor => {\n        const vault = getVaultFor(target.constructor);\n        vault.methods = vault.methods || {};\n        vault.methods[property] = vault.methods[property] || {};\n        Object.assign(vault.methods[property], {\n            endpoint,\n            method: 'put',\n            fn: descriptor.value,\n        });\n\n        return descriptor;\n    };\n};\n\nexport const Patch = (endpoint?: string): Function => {\n    return (\n        target,\n        property: string,\n        descriptor: PropertyDescriptor,\n    ): PropertyDescriptor => {\n        const vault = getVaultFor(target.constructor);\n        vault.methods = vault.methods || {};\n        vault.methods[property] = vault.methods[property] || {};\n        Object.assign(vault.methods[property], {\n            endpoint,\n            method: 'patch',\n            fn: descriptor.value,\n        });\n\n        return descriptor;\n    };\n};\n\nexport const Delete = (endpoint?: string): Function => {\n    return (\n        target,\n        property: string,\n        descriptor: PropertyDescriptor,\n    ): PropertyDescriptor => {\n        const vault = getVaultFor(target.constructor);\n        vault.methods = vault.methods || {};\n        vault.methods[property] = vault.methods[property] || {};\n        Object.assign(vault.methods[property], {\n            endpoint,\n            method: 'delete',\n            fn: descriptor.value,\n        });\n\n        return descriptor;\n    };\n};\n\nexport const BodyInput = (dto?: Function): Function => {\n    return (\n        target,\n        property: string,\n        descriptor: PropertyDescriptor,\n    ): PropertyDescriptor => {\n        const vault = getVaultFor(target.constructor);\n        vault.methods = vault.methods || {};\n        vault.methods[property] = vault.methods[property] || {};\n        Object.assign(vault.methods[property], {\n            bodyDTO: dto,\n        });\n\n        return descriptor;\n    };\n};\n\nexport const Output = (dto?: Function): Function => {\n    return (\n        target,\n        property: string,\n        descriptor: PropertyDescriptor,\n    ): PropertyDescriptor => {\n        const vault = getVaultFor(target.constructor);\n        vault.methods = vault.methods || {};\n        vault.methods[property] = vault.methods[property] || {};\n        Object.assign(vault.methods[property], {\n            outputDTO: dto,\n        });\n\n        return descriptor;\n    };\n};\n\nexport const DTO = (): Function => {\n    return (constructor: Function) => {\n        const vault = getVaultFor(constructor);\n        vault.isDTO = true;\n\n        return constructor;\n    };\n};\n\nexport const Attribute = (params: StringMap): Function => {\n    return (\n        target,\n        property: string,\n        descriptor: PropertyDescriptor,\n    ): PropertyDescriptor => {\n        const { initializer } = descriptor;\n\n        const vault = getVaultFor(target.constructor);\n        vault.attributes = vault.attributes || {};\n\n        vault.attributes[property] = Object.assign(\n            {},\n            {\n                params,\n                value: initializer ? initializer() : null,\n            },\n        );\n\n        return descriptor;\n    };\n};\n","import * as yup from 'yup';\nimport { getVaultFor } from './vault';\nimport { StringMap } from './type';\n\nconst cache = new Map();\n\nexport const getValidator = (dto: any, depth = 1): object => {\n    if (depth > 30) {\n        return null;\n    }\n\n    const vault = getVaultFor(dto);\n\n    if (!vault || !vault.isDTO) {\n        return null;\n    }\n\n    if (depth === 1 && cache[dto]) {\n        return cache[dto];\n    }\n\n    let result = yup.object();\n\n    const { attributes } = vault;\n    if (!_.ione(attributes)) {\n        return result;\n    }\n\n    Object.keys(attributes as StringMap).forEach((attributeName: string) => {\n        const {\n            params: { required, type },\n        } = attributes[attributeName];\n        const shape = {};\n\n        let subType = null;\n        let fieldType = type;\n        let isArray = false;\n        if (_.isArray(type)) {\n            [fieldType] = type;\n            isArray = true;\n        }\n\n        if (_.isFunction(fieldType)) {\n            subType = getValidator(fieldType, depth + 1);\n        } else {\n            // only basic stuff so far\n            if (fieldType === 'string') {\n                subType = yup.string();\n            } else if (fieldType === 'number') {\n                subType = yup.number();\n            } else if (fieldType === 'boolean') {\n                subType = yup.boolean();\n            } else {\n                subType = yup.string();\n            }\n        }\n\n        if (subType === null) {\n            throw new Error(`No DTO found for \"${attributeName}\" attribute`);\n        }\n\n        if (isArray) {\n            subType = yup.array().of(subType);\n        }\n\n        if (required) {\n            subType = subType.required();\n        }\n\n        // todo: show \"path\" here\n        subType = subType.typeError(\n            `Member \"${attributeName}\" should be of type \"${type}\"`,\n        );\n\n        shape[attributeName] = subType;\n\n        result = result.shape(shape);\n    });\n\n    if (depth === 1) {\n        cache[dto] = result;\n    }\n\n    return result;\n};\n\nexport const filterStructure = (\n    structure: StringMap,\n    dto: Function,\n    depth = 1,\n): StringMap => {\n    if (depth > 30) {\n        return {};\n    }\n\n    const vault = getVaultFor(dto);\n\n    if (!vault || !vault.isDTO) {\n        return {};\n    }\n\n    const { attributes } = vault;\n    if (!_.ione(attributes)) {\n        return {};\n    }\n\n    const legalKeys = _.intersection(\n        Object.keys(structure),\n        Object.keys(attributes),\n    );\n\n    const result = {};\n    legalKeys.forEach((key: string) => {\n        const attribute = attributes[key];\n        const {\n            params: { type },\n        } = attribute;\n        const structureValue = structure[key];\n\n        if (_.isArray(type)) {\n            const [subType] = type;\n            if (_.isArray(structure[key])) {\n                // check each subitem\n                if (_.isFunction(subType)) {\n                    result[key] = structureValue.map((subValue: any) =>\n                        filterStructure(subValue, subType, depth + 1),\n                    );\n                } else {\n                    result[key] = structureValue;\n                }\n            } else {\n                result[key] = [];\n            }\n        } else {\n            if (_.isFunction(type)) {\n                result[key] = filterStructure(structureValue, type, depth + 1);\n            } else {\n                result[key] = structureValue;\n            }\n        }\n    });\n\n    return result;\n};\n","export * from './api';\nexport * from './decorator';\n// @ts-ignore\nexport * from './type';\n","import { StringMap } from './type';\n\nconst vault = new Map();\n\nexport const getVaultFor = (obj: any): StringMap => {\n    if (!vault[obj]) {\n        vault[obj] = {};\n    }\n\n    return vault[obj];\n};\n\nexport const hasVaultFor = (obj: any): boolean => !!vault[obj];\n\nexport const getVault = () => vault;\n","import { camel } from 'naming-style';\n\nexport const injectPassword = (\n    url: string,\n    password: Nullable<string> = null,\n) => {\n    if (typeof password === 'string' && password.length) {\n        const oUrl = new URL(url);\n        oUrl.password = password;\n\n        url = oUrl.toString();\n    }\n\n    return url;\n};\n\nexport const decomposeURL = (url: string) => {\n    const oUrl = new URL(url);\n\n    const parts = {\n        host: oUrl.hostname,\n        port: oUrl.port,\n        password: oUrl.password,\n    };\n\n    if (!_.isne(parts.host)) {\n        // invalid url\n        return null;\n    }\n\n    if (Number.isNaN(Number(parts.port))) {\n        delete parts.port;\n    }\n\n    return parts;\n};\n\n/**\n * @deprecated\n * @param str\n * @returns {string}\n */\nexport const convertToCamel = (str: string) => {\n    str = camel(str.toLowerCase());\n    return `${str.substr(0, 1).toUpperCase()}${str.substr(1, str.length - 1)}`;\n};\n","import { MigrationInterface, QueryRunner } from 'typeorm';\nimport { logger } from 'ew-internals';\nimport {\n    ENTITY_ID_FIELD_NAME,\n    ENTITY_ID_FIELD_LENGTH,\n} from 'project-minimum-core';\nimport SchemaEntity from '../model/schema';\n\n/**\n * https://github.com/typeorm/typeorm/blob/master/docs/migrations.md\n */\nexport class Seed1517934720430 implements MigrationInterface {\n    public async up(queryRunner: QueryRunner) {\n        await queryRunner.connection.synchronize(false);\n\n        if (process.env.NODE_ENV === 'development') {\n            const repository = queryRunner.connection.getRepository(\n                SchemaEntity,\n            );\n            const current = await repository.find({ where: { draft: false } });\n            if (!current.length) {\n                const schema = new SchemaEntity();\n                schema.draft = false;\n                schema.version = 1;\n                // eslint-disable-next-line no-use-before-define,@typescript-eslint/no-use-before-define\n                schema.schema = demoSchema;\n\n                await repository.save(schema);\n            }\n        }\n\n        logger.info('🌱 Seed migration applied');\n    }\n\n    // eslint-disable-next-line no-empty-function\n    public async down() {}\n}\n\nconst demoSchema = [\n    {\n        name: 'important_person',\n        schema: [\n            {\n                name: ENTITY_ID_FIELD_NAME,\n                type: 'string',\n                label: 'Id',\n                length: ENTITY_ID_FIELD_LENGTH,\n                unique: true,\n                system: true,\n            },\n            {\n                name: 'full_name',\n                type: 'string',\n                label: 'Full name',\n                required: true,\n            },\n            { name: 'tags', type: ['string'], label: 'Tags' },\n            {\n                name: 'lucky_numbers',\n                type: ['integer'],\n                label: 'Lucky numbers',\n            },\n            { name: 'birth_date', type: 'datetime', label: 'Birth date' },\n            { name: 'has_pets', type: 'boolean', label: 'Has pets' },\n            { name: 'pets', type: ['pet'], label: 'Pets' },\n            { name: 'tools', type: ['tool'], label: 'Tools' },\n            { name: 'partner', type: 'important_person', label: 'Partner' },\n        ],\n    },\n    {\n        name: 'pet',\n        schema: [\n            {\n                name: ENTITY_ID_FIELD_NAME,\n                type: 'string',\n                label: 'Id',\n                length: ENTITY_ID_FIELD_LENGTH,\n                unique: true,\n                system: true,\n            },\n            {\n                name: 'nickname',\n                type: 'string',\n                label: 'Nickname',\n                required: true,\n            },\n        ],\n    },\n    {\n        name: 'tool',\n        schema: [\n            {\n                name: ENTITY_ID_FIELD_NAME,\n                type: 'string',\n                label: 'Id',\n                length: ENTITY_ID_FIELD_LENGTH,\n                unique: true,\n                system: true,\n            },\n            { name: 'name', type: 'string', label: 'Name', required: true },\n        ],\n    },\n];\n","import { Seed1517934720430 } from './1517934720430-Seed';\n\nexport default [Seed1517934720430];\n","/**\n * https://github.com/typeorm/typeorm/blob/master/docs/entities.md\n * https://github.com/typeorm/typeorm/blob/master/src/driver/types/ColumnTypes.ts\n */\n\nimport { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\nimport { DB_SCHEMA_TABLE_NAME } from 'project-minimum-core';\n\n@Entity({ name: DB_SCHEMA_TABLE_NAME })\nclass SchemaEntity {\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column({ type: 'boolean', nullable: false })\n    public draft: boolean;\n\n    // todo: use types from project-minimum-core here, when ready\n    @Column({ type: 'json', nullable: false })\n    public schema: { [key: string]: any };\n\n    @Column({ type: 'smallint', default: 0 })\n    public version: number;\n}\n\nexport default SchemaEntity;\n","import { Schema } from 'project-minimum-core';\nimport SchemaEntity from '../model/schema';\n\nclass SchemaService {\n    static async load(type, connectionManager) {\n        const connection = await connectionManager.getSystem();\n\n        const schema = await connection.getRepository(SchemaEntity).findOne({\n            draft: type === 'draft',\n        });\n\n        return new Schema(schema || {});\n    }\n\n    static async put(type, schema, connectionManager) {\n        const errors = await schema.getHealth();\n        if (!_.iane(errors)) {\n            const connection = await connectionManager.getSystem();\n            const repo = connection.getRepository(SchemaEntity);\n\n            // get current\n            let current = await connection.getRepository(SchemaEntity).findOne({\n                draft: false,\n            });\n            if (current) {\n                const currentSchema = new Schema(current);\n                // have current => update\n                repo.merge(current, {\n                    version: currentSchema.getVersion() + 1,\n                    declaration: schema.getSchema(),\n                });\n            } else {\n                // else => create\n                current = repo.create({\n                    draft: false,\n                    version: 0,\n                    declaration: schema.getSchema(),\n                });\n            }\n\n            try {\n                // store\n                await repo.save(current);\n            } catch (error) {\n                logger.error('Unable to save schema to the database', error);\n                errors.push({\n                    message: __DEV__\n                        ? error.message\n                        : 'Unable to save schema to the database',\n                    code: 'internal_db_error',\n                    type: 'internal',\n                });\n            }\n        }\n\n        return errors;\n    }\n}\n\nexport default SchemaService;\n","module.exports = require(\"@apollographql/graphql-playground-html\");","module.exports = require(\"@babel/polyfill\");","module.exports = require(\"accepts\");","module.exports = require(\"apollo-server-core\");","module.exports = require(\"apollo-server-express\");","module.exports = require(\"cors\");","module.exports = require(\"dataloader\");","module.exports = require(\"ew-internals\");","module.exports = require(\"express\");","module.exports = require(\"helmet\");","module.exports = require(\"lodash.clonedeep\");","module.exports = require(\"lodash.difference\");","module.exports = require(\"lodash.get\");","module.exports = require(\"lodash.intersection\");","module.exports = require(\"lodash.isobject\");","module.exports = require(\"lodash.union\");","module.exports = require(\"md5\");","module.exports = require(\"merge-graphql-schemas\");","module.exports = require(\"naming-style\");","module.exports = require(\"path\");","module.exports = require(\"project-minimum-core\");","module.exports = require(\"redis-tag-cache\");","module.exports = require(\"typeorm\");","module.exports = require(\"uuid/v4\");","module.exports = require(\"yup\");"],"sourceRoot":""}