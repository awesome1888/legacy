{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/api/home.js","webpack:///./src/api/hz.ts","webpack:///./src/api/schema.js","webpack:///./src/api/sync.js","webpack:///./src/entity/schema.js","webpack:///./src/graphql/resolvers/index.js","webpack:///./src/graphql/types/error.graphql","webpack:///./src/graphql/types/filter.graphql","webpack:///./src/graphql/types/index.js","webpack:///./src/graphql/types/sort.graphql","webpack:///./src/index.js","webpack:///./src/lib/cache.js","webpack:///./src/lib/cors.js","webpack:///./src/lib/database/code-id.js","webpack:///./src/lib/database/connection-manager.js","webpack:///./src/lib/database/data-loader-pool.js","webpack:///./src/lib/database/entity-manager.js","webpack:///./src/lib/database/migrator.js","webpack:///./src/lib/database/query.js","webpack:///./src/lib/error-handler.js","webpack:///./src/lib/graphql/apollo.js","webpack:///./src/lib/graphql/ast.js","webpack:///./src/lib/graphql/graphql-express.js","webpack:///./src/lib/graphql/resolver-generator.js","webpack:///./src/lib/graphql/type-generator.js","webpack:///./src/lib/lodash.js","webpack:///./src/lib/schema-store.js","webpack:///./src/lib/util.js","webpack:///./src/migrations/1517934720430-Seed.js","webpack:///./src/migrations/index.js","webpack:///external \"@apollographql/graphql-playground-html\"","webpack:///external \"@babel/polyfill\"","webpack:///external \"accepts\"","webpack:///external \"apollo-server-core\"","webpack:///external \"apollo-server-express\"","webpack:///external \"cors\"","webpack:///external \"dataloader\"","webpack:///external \"ew-internals\"","webpack:///external \"express\"","webpack:///external \"helmet\"","webpack:///external \"lodash.clonedeep\"","webpack:///external \"lodash.difference\"","webpack:///external \"lodash.get\"","webpack:///external \"lodash.intersection\"","webpack:///external \"lodash.isfunction\"","webpack:///external \"lodash.isobject\"","webpack:///external \"lodash.union\"","webpack:///external \"md5\"","webpack:///external \"merge-graphql-schemas\"","webpack:///external \"naming-style\"","webpack:///external \"path\"","webpack:///external \"project-minimum-core\"","webpack:///external \"redis-tag-cache\"","webpack:///external \"typeorm\"","webpack:///external \"uuid/v4\""],"names":["useHomeAPI","app","get","wrapError","req","res","status","send","hz","sendJSONResult","result","code","errors","find","error","type","header","JSON","stringify","useSchemaAPI","params","connectionManager","data","entity","_","push","message","schema","SchemaStore","load","getEntity","put","draftSchema","patch","Schema","getSchema","useSyncAPI","Migrator","migrate","name","DB_SCHEMA_TABLE_NAME","columns","id","primary","generated","nullable","draft","version","defaultValue","EntitySchema","errorType","sortType","filterType","express","settings","Settings","useErrorHandler","host","port","process","env","PORT","set","useCORS","use","static","path","join","cwd","helmet","json","urlencoded","extended","cache","Cache","make","ConnectionManager","systemConnection","getSystem","runMigrations","useGraphQL","listen","logger","info","__TEST__","Error","url","password","constructor","props","isne","sUrl","decomposeURL","injectPassword","TagCache","redis","connectTimeout","args","invalidate","cors","origin","cb","then","corsSettings","origins","split","map","x","trim","match","iane","indexOf","catch","CodeId","connection","codeToId","codeToGet","entities","addCode","databaseEntity","entityName","options","getId","obtain","Promise","all","Object","keys","repository","getRepository","where","In","select","items","forEach","item","connections","preConnect","close","simple","SchemaEntity","migrationsTableName","DB_MIGRATION_TABLE_NAME","migrations","invalidateConnections","createConnection","DataLoaderPool","pool","loaderId","fn","DataLoader","EntityManager","getName","field","isReference","isMultiple","getTableName","DB_ENTITY_TABLE_PREFIX","substr","DB_IDENTIFIER_LENGTH","getReferenceTableName","DB_REF_TABLE_PREFIX","md5","getDBType","getActualType","getDDLByEntity","table","isNullable","isGenerated","isPrimary","isUnique","isArray","length","zerofill","unsigned","getFields","isMultipleField","isMandatory","getLength","entityList","getForEntity","getByName","getByDefinition","DB_CODE_COLUMN_LENGTH","references","column","array","self","rel","getDelta","queryRunner","createQueryRunner","tables","getTables","tablesToCreate","tableNamesToDrop","tablesToProbablyAlter","currentTables","futureTables","tableToEntity","values","startsWith","tablesToAlter","i","futureTable","currentTable","tableFutureFieldNames","reduce","tableCurrentFieldNames","fieldsToAdd","difference","fieldsToDelete","j","includes","add","delete","ENTITY_PK_FIELD_NAME","ENTITY_ID_FIELD_NAME","currentReferences","filter","futureReferences","getMultipleReferences","referenceTableName","REFERENCE_ENTITY_PARENT_FIELD_NAME","REFERENCE_ENTITY_CHILD_FIELD_NAME","union","create","drop","alter","delta","entityTableNames","query","DB_TABLE_PREFIX","t","table_name","Query","queryBuilder","tableName","parameters","restrictLimit","sort","tableNameSafe","sanitize","selectSafe","prepareSelect","alias","orderBySafe","prepareOrderBy","limit","offset","prepareLimitOffset","skip","orderBy","take","order","ione","prefix","legalFields","getLegalFields","fieldName","page","pageSize","parseInt","Number","isNaN","DB_QUERY_FIND_MAX_PAGE_SIZE","fields","toSelect","intersection","value","replace","on","err","next","server","getServer","stop","databaseEntityManager","DatabaseEntityManager","entityTypeDefs","GQLTypeGenerator","eResolver","ResolverGenerator","ApolloServer","typeDefs","mergeTypes","resolvers","mergeResolvers","context","requestId","uuid","dataLoaderPool","debug","__DEV__","method","accept","accepts","types","prefersHTML","setHeader","playground","renderPlaygroundPage","endpoint","serverInstance","graphqlExpress","createGraphQLServerOptions","getASTAt","ast","fieldNodes","node","selectionSet","selections","f","getSelectionAt","e","arguments","runHttpQuery","body","request","convertNodeHttpToRequest","graphqlResponse","responseInit","headers","entries","write","end","statusCode","makeForEntity","makeGetForEntity","source","selectedFields","dbItem","wrap","findOne","getRealFields","convertToPlain","makeFindForEntity","search","getLimitOffset","undefined","makeWhereFind","count","makePutForEntity","isNewItem","prepareData","safeData","validateData","reference","singleReferences","getSingleReferences","referenceFieldName","referencedDatabaseEntity","getReferenceAttributes","databaseItem","merge","save","manageMultipleReferences","makeDeleteForEntity","referenceField","referenceDatabaseEntity","referenceRepository","referenceQueryBuilder","createQueryBuilder","from","execute","getCamelName","Mutation","makeReferenceResolversForEntity","ids","Array","insert","into","referenceId","getReferences","makeReferenceResolverMultiple","makeReferenceResolverSingle","referenceValue","referencedEntityName","referencedRepository","key","loader","referencedTableName","referencedEntity","referencedQueryBuilder","referencedTableNameSafe","referenceFieldNameSafe","innerJoinAndSelect","getMany","Like","plain","fieldType","multiple","fieldValue","TYPE_DATETIME","subItem","Date","toISOString","realFields","getReferencedEntityName","referenceEntityName","TypeGenerator","gqlTypes","tFields","iFields","fFields","sFields","getQueryFieldName","getGQLFieldType","input","gqlType","TYPE_STRING","TYPE_INTEGER","TYPE_BOOLEAN","referencedEntityNameCamel","isObject","isFunction","cloneDeep","arg","checkHealth","repo","current","currentSchema","getVersion","declaration","oUrl","URL","toString","parts","hostname","convertToCamel","str","camel","toLowerCase","toUpperCase","Seed1517934720430","up","createTable","Table","down"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import { wrapError } from 'ew-internals';\n\nimport hz from './hz'\n\nconst useHomeAPI = app => {\n    app.get(\n        '/',\n        wrapError(async (req, res) => {\n            res.status(200).send('Hello');\n        }),\n    );\n};\n\nexport default useHomeAPI;\n","const hz: string = 1;\n\nexport default hz;\n","import { wrapError } from 'ew-internals';\nimport { Schema } from 'project-minimum-core';\nimport SchemaStore from '../lib/schema-store';\n\n// todo: move sendJSONResult() to ew-internals\nconst sendJSONResult = (res, result, code = null) => {\n    let status = 200;\n    if (code) {\n        status = code;\n    } else if (result.errors.find(error => error.type === 'internal')) {\n        status = 500;\n    } else if (result.errors.find(error => error.type === 'request')) {\n        status = 400;\n    }\n\n    return res\n        .header('Content-Type', 'application/json')\n        .status(status)\n        .send(JSON.stringify(result));\n};\n\nconst useSchemaAPI = (app, params = {}) => {\n    const { connectionManager } = params;\n\n    /**\n     * Get schema entity (draft or actual)\n     */\n    app.get(\n        '/schema/:type/:entity',\n        wrapError(async (req, res) => {\n            const result = {\n                errors: [],\n                data: null,\n            };\n\n            const entity = _.get(req, 'params.entity');\n            const type = _.get(req, 'params.type');\n            if (type !== 'draft' && type !== 'actual') {\n                result.errors.push({\n                    message: 'Illegal schema type',\n                    code: 'illegal_schema_type',\n                    type: 'request',\n                });\n                return sendJSONResult(res, result);\n            }\n\n            const schema = await SchemaStore.load(type, connectionManager);\n            if (schema) {\n                result.data = schema.getEntity(entity);\n            }\n\n            return sendJSONResult(res, result, !result.data ? 404 : null);\n        }),\n    );\n\n    /**\n     * Get the entire schema (draft or actual)\n     */\n    app.get(\n        '/schema/:type',\n        wrapError(async (req, res) => {\n            const result = {\n                errors: [],\n                data: null,\n            };\n\n            const type = _.get(req, 'params.type');\n            if (type !== 'draft' && type !== 'actual') {\n                result.errors.push({\n                    message: 'Illegal schema type',\n                    code: 'illegal_schema_type',\n                    type: 'request',\n                });\n                return sendJSONResult(res, result);\n            }\n\n            result.data = await SchemaStore.load(type, connectionManager);\n            return sendJSONResult(res, result, !result.data ? 404 : null);\n        }),\n    );\n\n    /**\n     * Commit the draft schema to the actual schema\n     */\n    app.put(\n        '/schema',\n        wrapError(async (req, res) => {\n            const result = {\n                errors: [],\n            };\n\n            // replace an actual schema with a draft\n            const draftSchema = await SchemaStore.load(\n                'draft',\n                connectionManager,\n            );\n            if (draftSchema) {\n                result.errors = await SchemaStore.put(\n                    'actual',\n                    draftSchema,\n                    connectionManager,\n                );\n            }\n\n            return sendJSONResult(res, result);\n        }),\n    );\n\n    /**\n     * Save draft schema\n     */\n    app.patch(\n        '/schema',\n        wrapError(async (req, res) => {\n            // save new schema as draft, check first\n            const result = {\n                errors: [],\n            };\n\n            const schema = _.get(req, 'body.schema');\n            result.errors = await SchemaStore.put(\n                'draft',\n                new Schema({ schema }).getSchema(), // todo: this makes a vulnerability\n                connectionManager,\n            );\n\n            return sendJSONResult(res, result);\n        }),\n    );\n};\n\nexport default useSchemaAPI;\n","import { wrapError } from 'ew-internals';\nimport Migrator from '../lib/database/migrator';\n\nconst useSyncAPI = (app, params = {}) => {\n    app.get(\n        '/sync',\n        wrapError(async (req, res) => {\n            await Migrator.migrate(params);\n            res.status(200).send(`<pre>1</pre>`);\n        }),\n    );\n};\n\nexport default useSyncAPI;\n","import { EntitySchema } from 'typeorm';\nimport { DB_SCHEMA_TABLE_NAME } from 'project-minimum-core';\n\nexport const schema = {\n    name: DB_SCHEMA_TABLE_NAME,\n    columns: {\n        id: {\n            primary: true,\n            type: 'integer',\n            generated: 'increment',\n            nullable: false,\n        },\n        draft: {\n            type: 'boolean',\n            nullable: false,\n        },\n        schema: {\n            type: 'json',\n            nullable: false,\n        },\n        version: {\n            type: 'integer',\n            defaultValue: 0,\n        },\n    },\n};\nexport default new EntitySchema(schema);\n","export default [];\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Error\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"subject\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":73}};\n    doc.loc.source = {\"body\":\"type Error {\\n    code: String!\\n    message: String\\n    subject: String\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"EnumTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterLogic\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"AND\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"OR\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NAND\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NOR\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterOperator\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"EQ\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NE\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"IN\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NIN\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"GT\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"LT\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"GTE\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"LTE\"},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"IFilterFieldValue\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Operation\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FilterOperator\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ValueA\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ValueB\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":236}};\n    doc.loc.source = {\"body\":\"enum FilterLogic {\\n    AND\\n    OR\\n    NAND\\n    NOR\\n}\\n\\nenum FilterOperator {\\n    EQ\\n    NE\\n    IN\\n    NIN\\n    GT\\n    LT\\n    GTE\\n    LTE\\n}\\n\\ninput IFilterFieldValue {\\n    Operation: FilterOperator\\n    ValueA: String\\n    ValueB: [String]\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","import errorType from './error.graphql';\nimport sortType from './sort.graphql';\nimport filterType from './filter.graphql';\n\nexport default [errorType, sortType, filterType];\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"EnumTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"SortOrder\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ASC\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"DESC\"},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":36}};\n    doc.loc.source = {\"body\":\"enum SortOrder {\\n    ASC\\n    DESC\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","import '@babel/polyfill';\nimport { Settings } from 'ew-internals';\nimport path from 'path';\nimport helmet from 'helmet';\nimport express from 'express';\n\nimport useErrorHandler from './lib/error-handler';\nimport useCORS from './lib/cors';\n\n// import { InterCom } from './lib/intercom';\nimport Cache from './lib/cache';\nimport ConnectionManager from './lib/database/connection-manager';\n\nimport useHomeAPI from './api/home';\nimport useGraphQL from './lib/graphql/apollo';\nimport useSchemaAPI from './api/schema';\nimport useSyncAPI from './api/sync';\n\n(async () => {\n    const app = express();\n    const settings = new Settings();\n\n    useErrorHandler(app);\n\n    const host = await settings.get('network.host', 'localhost');\n    const port =\n        process.env.PORT || (await settings.get('network.port', 3000));\n\n    app.set('host', host);\n    app.set('port', port);\n    // app.set('query parser', query => {\n    //   return qs.parse(query, { allowPrototypes: false, depth: 10 });\n    // });\n\n    useCORS(app, settings);\n\n    app.use(express.static(path.join(process.cwd(), 'public')));\n    app.use(helmet());\n    app.use(express.json());\n    app.use(\n        express.urlencoded({\n            extended: true,\n        }),\n    );\n\n    const cache = await Cache.make({ settings });\n    const connectionManager = new ConnectionManager({ settings });\n    const systemConnection = await connectionManager.getSystem();\n    await systemConnection.runMigrations();\n\n    // const intercom = new InterCom({\n    //     url: await settings.get('intercom.url', ''),\n    // });\n    // await intercom.start();\n\n    useHomeAPI(app, { cache });\n    useGraphQL(app, {\n        settings,\n        cache,\n        connectionManager,\n    });\n    useSchemaAPI(app, { cache, connectionManager });\n    useSyncAPI(app, {\n        cache,\n        connectionManager,\n    }); // todo: temporary endpoint\n\n    app.listen({ port }, () => {\n        logger.info(\n            `🚀 API server is ready at http://${host}:${port}`,\n            !__TEST__,\n        );\n    });\n})();\n","/**\n * A purpose of this class is to gracefully handle situations when\n * no cache endpoint provided\n */\n\nimport TagCache from 'redis-tag-cache';\nimport { injectPassword, decomposeURL } from './util';\n\nexport default class Cache {\n    static async make(params = {}) {\n        const { settings } = params;\n        if (!settings) {\n            throw new Error('No settings provided');\n        }\n\n        const url = await settings.get('cache.url', null);\n        const password = await settings.get('cache.password', null);\n\n        return new this({\n            url,\n            password,\n        });\n    }\n\n    constructor(props = {}) {\n        const { url, password } = props;\n        this.cache = null;\n        if (_.isne(url)) {\n            const sUrl = decomposeURL(injectPassword(url, password));\n            if (sUrl === null) {\n                // logger.warn('Illegal URL passed, will proceed without cache');\n                return;\n            }\n\n            this.cache = new TagCache({\n                redis: {\n                    ...sUrl,\n                    connectTimeout: 1000,\n                },\n            });\n        }\n    }\n\n    async get(...args) {\n        if (this.cache) {\n            return this.cache.get(...args);\n        }\n\n        return null;\n    }\n\n    async set(...args) {\n        if (this.cache) {\n            return this.cache.set(...args);\n        }\n\n        return null;\n    }\n\n    async invalidate(...args) {\n        if (this.cache) {\n            return this.cache.invalidate(...args);\n        }\n\n        return null;\n    }\n}\n","import cors from 'cors';\n\nconst useCORS = (app, settings) => {\n    app.use(cors({\n        origin: (origin, cb) => {\n            // allow requests with no origin, like mobile apps or curl requests\n            if (!origin) {\n                return cb(null, true);\n            }\n\n            // get cors settings on each hit, to be able to change it at the run-time\n            settings\n                .get('network.cors', null)\n                .then(corsSettings => {\n                    if (corsSettings === '*') {\n                        return cb(null, true);\n                    }\n\n                    const origins = _.isne(corsSettings)\n                        ? corsSettings.split(',').map(x => x.trim())\n                        : [];\n\n                    let match = false;\n                    if (_.iane(origins)) {\n                        // we have CORS settings\n                        match = origins.indexOf(origin) >= 0;\n                    }\n\n                    if (match) {\n                        return cb(null, true);\n                    } else {\n                        return cb(new Error('CORS mismatch'), false); // todo: throw 403\n                    }\n                })\n                .catch(error => {\n                    logger.error(\n                        'Error occurred when checking CORS',\n                        error,\n                    );\n                    return cb(new Error('CORS error'), false); // todo: throw 500\n                });\n        },\n    }));\n};\n\nexport default useCORS;\n","import { In } from 'typeorm';\n\nexport class CodeId {\n    constructor({ connection } = {}) {\n        this.connection = connection;\n\n        this.codeToId = {};\n        this.codeToGet = {};\n        this.entities = {};\n    }\n\n    addCode(code, databaseEntity) {\n        if (this.codeToId[code]) {\n            return;\n        }\n\n        const entityName = databaseEntity.options.name;\n\n        this.entities[entityName] = databaseEntity;\n        this.codeToGet[entityName] = this.codeToGet[entityName] || [];\n        this.codeToGet[entityName].push(code);\n    }\n\n    getId(code) {\n        return this.codeToId[code] || null;\n    }\n\n    async obtain() {\n        await Promise.all(\n            Object.keys(this.codeToGet).map(entityName => {\n                const entity = this.entities[entityName];\n                const repository = this.connection.getRepository(entity);\n                return repository\n                    .find({\n                        where: { code: In(this.codeToGet[entityName]) },\n                        select: ['id', 'code'],\n                    })\n                    .then(items => {\n                        items.forEach(item => {\n                            this.codeToId[item.code] = item.id;\n                        });\n                    });\n            }),\n        );\n    }\n}\n","import { createConnection } from 'typeorm';\n\nimport SchemaEntity from '../../entity/schema';\nimport migrations from '../../migrations/index';\nimport { DB_MIGRATION_TABLE_NAME } from 'project-minimum-core';\nimport { injectPassword } from '../util';\n\nexport default class ConnectionManager {\n    constructor({ settings }) {\n        this.settings = settings;\n        this.connections = {};\n    }\n\n    /**\n     * Creates a regular connection to get data over\n     * @param entities\n     * @param preConnect\n     * @returns {Promise<*>}\n     */\n    async get({ entities, preConnect }) {\n        if (!this.connections.entity) {\n            this.connections.entity = this.make({\n                settings: this.settings,\n                entities,\n                preConnect,\n            });\n        }\n        return this.connections.entity;\n    }\n\n    /**\n     * Close current regular connection\n     * @returns {Promise<void>}\n     */\n    async close() {\n        if (this.connections.entity) {\n            await this.connections.entity.close();\n            this.connections.entity = null;\n        }\n    }\n\n    /**\n     * Creates a system connection to get the schema over\n     * @returns {Promise<*|CacheConfigurator.simple|buttonStyle.simple|{'&,&:focus,&:hover,&:visited', '&$primary', '&$info', '&$success', '&$warning', '&$rose', '&$danger', '&$twitter', '&$facebook', '&$google', '&$github'}>}\n     */\n    async getSystem() {\n        if (!this.connections.simple) {\n            this.connections.simple = this.make({\n                name: 'system',\n                settings: this.settings,\n                entities: [\n                    SchemaEntity,\n                    // todo: user entity, group entity\n                ],\n                migrationsTableName: DB_MIGRATION_TABLE_NAME,\n                migrations,\n            });\n        }\n        return this.connections.simple;\n    }\n\n    async invalidateConnections() {\n        await this.close();\n        this.connections = {};\n    }\n\n    async make(params = {}) {\n        const { settings } = params;\n        if (!settings) {\n            throw new Error('No settings provided');\n        }\n\n        const url = await settings.get('db.url', null);\n        const password = await settings.get('db.password', null);\n        const sUrl = injectPassword(url, password);\n\n        return createConnection({\n            ...params,\n            url: sUrl,\n            type: 'postgres',\n        });\n    }\n}\n","import DataLoader from 'dataloader';\n\nexport default class DataLoaderPool {\n    constructor() {\n        this.pool = {};\n    }\n\n    get(loaderId, fn) {\n        if (!_.isne(loaderId) || typeof fn !== 'function') {\n            return null;\n        }\n\n        if (!this.pool[loaderId]) {\n            this.pool[loaderId] = new DataLoader(fn);\n        }\n\n        return this.pool[loaderId];\n    }\n}\n","import md5 from 'md5';\nimport { EntitySchema } from 'typeorm';\nimport {\n    DB_ENTITY_TABLE_PREFIX,\n    DB_IDENTIFIER_LENGTH,\n    DB_REF_TABLE_PREFIX,\n    DB_CODE_COLUMN_LENGTH,\n} from 'project-minimum-core';\n\n/**\n * This class creates database entities based on the schema\n */\nexport default class EntityManager {\n    /**\n     * @param entity Schema entity (not database entity)\n     * @param field\n     */\n    static getName(entity, field = null) {\n        if (field && field.isReference() && field.isMultiple()) {\n            return `${entity.getName()}_2_${field.getName()}`;\n        }\n\n        return entity.getName();\n    }\n\n    /**\n     * @param entity Schema entity (not database entity)\n     */\n    static getTableName(entity) {\n        return `${DB_ENTITY_TABLE_PREFIX}${entity.getName()}`.substr(\n            0,\n            DB_IDENTIFIER_LENGTH,\n        );\n    }\n\n    /**\n     * @param entity Schema entity (not database entity)\n     * @param field\n     */\n    static getReferenceTableName(entity, field) {\n        return `${DB_REF_TABLE_PREFIX}${md5(\n            `${entity.getName()}_${field.getName()}`,\n        )}`;\n    }\n\n    /**\n     * Get database type by schema type\n     * https://github.com/typeorm/typeorm/blob/master/src/driver/types/ColumnTypes.ts\n     * @param field\n     * @returns {string}\n     */\n    static getDBType(field) {\n        if (field.isReference()) {\n            return field.isMultiple() ? null : 'integer';\n        }\n\n        const type = field.getActualType();\n\n        switch (type) {\n            case 'string':\n                return 'varchar';\n            case 'integer':\n                return 'integer';\n            case 'datetime':\n                return 'timestamp';\n            case 'boolean':\n                return 'boolean';\n            default:\n                return 'string';\n        }\n    }\n\n    /**\n     * Accepts a schema entity and returns a DDL structure of the table to create\n     */\n    static getDDLByEntity(entity) {\n        const table = {\n            name: this.getTableName(entity),\n            columns: [],\n        };\n\n        // add \"system\" field: id\n        table.columns.push({\n            isNullable: false,\n            isGenerated: true,\n            isPrimary: true,\n            isUnique: true,\n            isArray: false,\n            length: '',\n            zerofill: false,\n            unsigned: true,\n            name: 'id',\n            type: 'integer',\n            generated: 'increment',\n        });\n\n        entity.getFields().forEach(field => {\n            if (field.isReference() && field.isMultipleField()) {\n                // we do not create any fields for many-to-may relation. Instead, a table should be created\n                return;\n            }\n\n            table.columns.push({\n                isNullable: !field.isMandatory(),\n                isGenerated: false,\n                isPrimary: false,\n                isUnique: field.isUnique(),\n                isArray: field.isMultiple(),\n                length: field.getLength(),\n                zerofill: false,\n                unsigned: false,\n                name: field.getName(),\n                type: this.getDBType(field),\n            });\n        });\n\n        return table;\n    }\n\n    constructor(schema) {\n        this.schema = schema;\n    }\n\n    /**\n     * Get all database entities by their schema definition\n     */\n    get() {\n        if (!this.entityList) {\n            let result = {};\n            this.schema.getSchema().forEach(entity => {\n                result = { ...result, ...this.getForEntity(entity) };\n            });\n            this.entityList = result;\n        }\n\n        return this.entityList;\n    }\n\n    getByName(name) {\n        const all = this.get();\n        return all[name];\n    }\n\n    getByDefinition(entity, field = null) {\n        return this.getByName(this.constructor.getName(entity, field));\n    }\n\n    /**\n     * @private\n     * @param entity\n     * @returns {EntitySchema}\n     */\n    getForEntity(entity) {\n        const result = {};\n\n        // get the entity itself\n        const columns = {\n            id: {\n                primary: true,\n                type: 'integer',\n                generated: 'increment',\n                nullable: false,\n            },\n            // todo: should we remove this?\n            code: {\n                type: 'varchar',\n                length: DB_CODE_COLUMN_LENGTH,\n                nullable: false,\n            },\n        };\n        const references = [];\n        entity.getFields().forEach(field => {\n            if (field.isReference() && field.isMultiple()) {\n                // collect multiple references, don't create fields for it\n                references.push(field);\n                return;\n            }\n\n            const column = {\n                type: this.constructor.getDBType(field),\n                nullable: !field.isMandatory(),\n                array: field.isMultiple(),\n            };\n\n            const length = field.getLength();\n            if (length !== null) {\n                column.length = length;\n            }\n\n            columns[field.getName()] = column;\n        });\n\n        result[this.constructor.getName(entity)] = new EntitySchema({\n            name: this.constructor.getTableName(entity),\n            columns,\n        });\n\n        // we do not create any fields for many-to-may relation, but make another entity\n        references.forEach(field => {\n            result[this.constructor.getName(entity, field)] = new EntitySchema({\n                name: this.constructor.getReferenceTableName(entity, field),\n                columns: {\n                    self: {\n                        type: 'integer',\n                        nullable: false,\n                        primary: true,\n                    },\n                    rel: {\n                        type: 'integer',\n                        nullable: false,\n                        primary: true,\n                    },\n                },\n            });\n        });\n\n        return result;\n    }\n}\n","/**\n * https://typeorm.io/#/migrations\n */\n\nimport { Table, TableColumn, TableIndex } from 'typeorm';\nimport {\n    DB_TABLE_PREFIX,\n    DB_REF_TABLE_PREFIX,\n    ENTITY_ID_FIELD_NAME,\n    ENTITY_PK_FIELD_NAME,\n    REFERENCE_ENTITY_PARENT_FIELD_NAME,\n    REFERENCE_ENTITY_CHILD_FIELD_NAME,\n} from 'project-minimum-core';\n\nimport EntityManager from './entity-manager';\n\nexport default class Migrator {\n    static async getDelta({ schema, connectionManager } = {}) {\n        const queryRunner = (await connectionManager.getSystem()).createQueryRunner(\n            'master',\n        );\n\n        const tables = this.getTables(queryRunner);\n\n        const tablesToCreate = [];\n        let tableNamesToDrop = [];\n        const tablesToProbablyAlter = [];\n\n        const currentTables = {};\n        const futureTables = {};\n\n        tables.forEach(table => {\n            currentTables[table.name] = table;\n        });\n\n        const entities = schema.getSchema();\n        const tableToEntity = {};\n\n        // tables\n        entities.forEach(entity => {\n            const table = EntityManager.getDDLByEntity(entity);\n            tableToEntity[table.name] = entity;\n            futureTables[table.name] = table;\n            if (!(table.name in currentTables)) {\n                tablesToCreate.push(table);\n            } else {\n                tablesToProbablyAlter.push(table);\n            }\n        });\n        Object.values(currentTables).forEach(table => {\n            if (\n                !(table.name in futureTables) &&\n                !table.name.startsWith(DB_REF_TABLE_PREFIX) // not a reference\n            ) {\n                tableNamesToDrop.push(table.name);\n            }\n        });\n\n        // fields\n        const tablesToAlter = {};\n\n        for (let i = 0; i < tablesToProbablyAlter.length; i += 1) {\n            const futureTable = tablesToProbablyAlter[i];\n            const currentTable = currentTables[futureTable.name];\n\n            const tableFutureFieldNames = Object.keys(\n                futureTable.columns.reduce((result, item) => {\n                    result[item.name] = true;\n                    return result;\n                }, {}),\n            );\n\n            const tableCurrentFieldNames = Object.keys(\n                currentTable.columns.reduce((result, item) => {\n                    result[item.name] = true;\n                    return result;\n                }, {}),\n            );\n\n            const fieldsToAdd = _.difference(\n                tableCurrentFieldNames,\n                tableFutureFieldNames,\n            );\n            const fieldsToDelete = _.difference(\n                tableFutureFieldNames,\n                tableCurrentFieldNames,\n            );\n\n            for (let j = 0; j < futureTable.columns.length; j += 1) {\n                const field = futureTable.columns[j];\n                if (fieldsToAdd.includes(field.name)) {\n                    tablesToAlter[futureTable.name] = tablesToAlter[\n                        futureTable.name\n                    ] || {\n                        add: [],\n                        delete: [],\n                    };\n                    tablesToAlter[futureTable.name].add.push(field);\n                }\n            }\n\n            for (let j = 0; j < currentTable.columns.length; j += 1) {\n                const field = currentTable.columns[j];\n\n                if (\n                    field.name !== ENTITY_PK_FIELD_NAME &&\n                    field.name !== ENTITY_ID_FIELD_NAME\n                ) {\n                    if (fieldsToDelete.includes(field.name)) {\n                        tablesToAlter[currentTable.name] = tablesToAlter[\n                            currentTable.name\n                        ] || {\n                            add: [],\n                            delete: [],\n                        };\n                        tablesToAlter[currentTable.name].delete.push(field);\n                    }\n                }\n            }\n\n            // todo: support altering of fields\n        }\n\n        // references\n        const currentReferences = Object.values(currentTables)\n            .map(table =>\n                table.name.startsWith(DB_REF_TABLE_PREFIX) ? table.name : false,\n            )\n            .filter(x => x);\n\n        const futureReferences = [];\n\n        // find all refs in future tables\n        Object.values(futureTables).forEach(table => {\n            const entity = tableToEntity[table.name];\n            entity.getMultipleReferences().forEach(field => {\n                const referenceTableName = EntityManager.getReferenceTableName(\n                    entity,\n                    field,\n                );\n                futureReferences.push(referenceTableName);\n\n                if (!currentReferences.includes(referenceTableName)) {\n                    tablesToCreate.push({\n                        name: referenceTableName,\n                        columns: [\n                            {\n                                name: REFERENCE_ENTITY_PARENT_FIELD_NAME,\n                                isNullable: false,\n                                isPrimary: true,\n                                type: 'integer',\n                            },\n                            {\n                                name: REFERENCE_ENTITY_CHILD_FIELD_NAME,\n                                isNullable: false,\n                                isPrimary: true,\n                                type: 'integer',\n                            },\n                        ],\n                    });\n                }\n            });\n        });\n\n        tableNamesToDrop = _.union(\n            tableNamesToDrop,\n            _.difference(currentReferences, futureReferences),\n        );\n\n        return {\n            create: tablesToCreate,\n            drop: tableNamesToDrop,\n            alter: tablesToAlter,\n        };\n    }\n\n    static async migrate(params) {\n        const delta = await this.getDelta(params);\n    }\n\n    static async getTables(queryRunner) {\n        const entityTableNames = (await queryRunner.query(\n            `select * from information_schema.tables where table_schema='public' and table_name like '${DB_TABLE_PREFIX}%'`,\n        )).map(t => t.table_name);\n\n        let tables = [];\n        if (entityTableNames.length) {\n            tables = await queryRunner.getTables(entityTableNames);\n        }\n\n        return tables;\n    }\n}\n","/**\n * https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md\n */\n\nimport { DB_QUERY_FIND_MAX_PAGE_SIZE } from 'project-minimum-core';\n\nexport class Query {\n    static make({\n        args,\n        queryBuilder,\n        entity,\n        tableName,\n        parameters = { restrictLimit: true },\n    }) {\n        const { select, filter, sort } = args;\n\n        const tableNameSafe = this.sanitize(tableName);\n\n        const selectSafe = this.prepareSelect(select, entity, {\n            ...parameters,\n            alias: tableNameSafe,\n        });\n        const orderBySafe = this.prepareOrderBy(sort, entity, {\n            ...parameters,\n            alias: tableNameSafe,\n        });\n\n        const { limit, offset } = this.prepareLimitOffset(args, parameters);\n\n        // todo: apply \"where\"\n\n        let query = queryBuilder.select(selectSafe).skip(offset);\n\n        if (orderBySafe) {\n            query = query.orderBy(orderBySafe);\n        }\n\n        if (limit !== null) {\n            query = query.take(limit);\n        }\n\n        return { query, limit };\n    }\n\n    static prepareOrderBy(order, entity, { alias = '' } = {}) {\n        if (!_.ione(order)) {\n            return null;\n        }\n\n        const prefix = alias ? `${alias}.` : '';\n        const legalFields = this.getLegalFields(entity);\n\n        const keys = Object.keys(order).filter(fieldName =>\n            legalFields.includes(fieldName),\n        );\n\n        return keys.reduce(\n            (result, fieldName) => ({\n                [`${prefix}${fieldName}`]: order[fieldName],\n                ...result,\n            }),\n            {},\n        );\n    }\n\n    static prepareLimitOffset(args, parameters = { restrictLimit: true }) {\n        let { limit, offset, page, pageSize } = args;\n\n        limit = parseInt(limit, 10);\n        if (Number.isNaN(limit)) {\n            if (parameters.restrictLimit) {\n                limit = DB_QUERY_FIND_MAX_PAGE_SIZE;\n            } else {\n                limit = null;\n            }\n        }\n\n        offset = parseInt(offset, 10);\n        if (Number.isNaN(offset)) {\n            offset = 0;\n        }\n\n        pageSize = parseInt(pageSize, 10);\n        if (!Number.isNaN(pageSize)) {\n            limit = pageSize;\n\n            page = parseInt(page, 10);\n            if (!Number.isNaN(page)) {\n                offset = (page - 1) * pageSize;\n            }\n        }\n\n        return { limit, offset };\n    }\n\n    static prepareSelect(fields, entity, { alias = '' } = {}) {\n        const prefix = alias ? `${alias}.` : '';\n        const toSelect = _.intersection(\n            fields,\n            this.getLegalFields(entity),\n        ).map(fieldName => `${prefix}${fieldName}`);\n\n        if (!toSelect.includes(`${prefix}id`)) {\n            toSelect.push(`${prefix}id`);\n        }\n        if (!toSelect.includes(`${prefix}code`)) {\n            toSelect.push(`${prefix}code`);\n        }\n\n        return toSelect;\n    }\n\n    static getLegalFields(entity) {\n        return entity\n            .getFields()\n            .filter(field => !(field.isReference() && field.isMultiple()))\n            .map(field => field.getName());\n    }\n\n    static sanitize(value) {\n        return value.replace(/[^a-zA-Z0-9_]/g, '');\n    }\n}\n","const useErrorHandler = (app) => {\n    // catching async unhandled rejections\n    process\n        .on('unhandledRejection', err => {\n            logger.error('Unhandled rejection', err);\n        })\n        .on('uncaughtException', err => {\n            logger.error('Uncaught exception', err);\n        });\n\n    // catching normal unhandled exceptions\n    app.use((err, req, res, next) => {\n        logger.error('Uncaught exception', err);\n        res.send('Nasty error'); // todo: explain here\n    });\n};\n\nexport default useErrorHandler;\n","import { ApolloServer } from 'apollo-server-express';\nimport { renderPlaygroundPage } from '@apollographql/graphql-playground-html';\nimport accepts from 'accepts';\nimport { mergeTypes, mergeResolvers } from 'merge-graphql-schemas';\nimport uuid from 'uuid/v4';\n\nimport { graphqlExpress } from './graphql-express';\nimport SchemaStore from '../../lib/schema-store';\nimport GQLTypeGenerator from './type-generator';\nimport ResolverGenerator from './resolver-generator';\nimport DatabaseEntityManager from '../../lib/database/entity-manager';\nimport DataLoaderPool from '../../lib/database/data-loader-pool';\n\nimport typeDefs from '../../graphql/types';\nimport resolvers from '../../graphql/resolvers';\n\nlet server = null;\n\nconst getServer = async ({ cache, connectionManager }) => {\n    if (!server || !(await cache.get('apollo.server.ready'))) {\n        if (server) {\n            await server.stop();\n            await connectionManager.close();\n        }\n\n        const schema = await SchemaStore.load('actual', connectionManager);\n        const databaseEntityManager = new DatabaseEntityManager(schema);\n\n        const connection = await connectionManager.get({\n            entities: Object.values(await databaseEntityManager.get()),\n            preConnect: true,\n        });\n\n        const entityTypeDefs = GQLTypeGenerator.make(schema);\n        const eResolver = ResolverGenerator.make(\n            schema,\n            databaseEntityManager,\n            connection,\n        );\n\n        // now everything is ready to create the server\n        server = new ApolloServer({\n            typeDefs: mergeTypes([...entityTypeDefs, ...typeDefs], {\n                all: true,\n            }),\n            resolvers: mergeResolvers([...eResolver, ...resolvers]),\n            context: async ({ req, res }) => {\n                return {\n                    requestId: uuid(),\n                    dataLoaderPool: new DataLoaderPool(),\n                };\n            },\n            debug: __DEV__,\n        });\n\n        await cache.set('apollo.server.ready', true, ['apollo']);\n    }\n\n    return server;\n};\n\nconst useGraphQL = (app, params = {}) => {\n    // server.applyMiddleware({ app, cors: false });\n\n    app.use('/graphql', async (req, res, next) => {\n        if (__DEV__ && req.method === 'GET') {\n            const accept = accepts(req);\n            const types = accept.types();\n            const prefersHTML =\n                types.find(\n                    x => x === 'text/html' || x === 'application/json',\n                ) === 'text/html';\n\n            if (prefersHTML) {\n                res.setHeader('Content-Type', 'text/html');\n                const playground = renderPlaygroundPage({\n                    endpoint: '/graphql',\n                });\n\n                return res.send(playground);\n            }\n        }\n\n        const serverInstance = await getServer(params);\n        return graphqlExpress(() => {\n            return serverInstance.createGraphQLServerOptions(req, res);\n        })(req, res, next);\n    });\n};\n\nexport default useGraphQL;\n","export const getASTAt = (ast, path = '') => {\n    if (!ast || !ast.fieldNodes || !ast.fieldNodes[0]) {\n        return null;\n    }\n\n    let node = ast.fieldNodes[0];\n\n    if (path.length) {\n        path = path.split('.');\n\n        let i = 0;\n        for (; i < path.length; i += 1) {\n            if (node.selectionSet && node.selectionSet.selections) {\n                node = node.selectionSet.selections.find(\n                    f => f.name.value === path[i],\n                );\n            } else {\n                break;\n            }\n        }\n\n        if (i === path.length) {\n            // found\n            return node;\n        }\n\n        return null;\n    }\n\n    return node || null;\n};\n\nexport const getSelectionAt = (ast, path = '') => {\n    try {\n        return getASTAt(ast, path).selectionSet.selections.map(\n            field => field.name.value,\n        );\n    } catch (e) {\n        return {};\n    }\n};\n","import { runHttpQuery, convertNodeHttpToRequest } from 'apollo-server-core';\n\nexport function graphqlExpress(options) {\n    if (!options) {\n        throw new Error('Apollo Server requires options.');\n    }\n\n    if (arguments.length > 1) {\n        // TODO: test this\n        throw new Error(\n            `Apollo Server expects exactly one argument, got ${\n                arguments.length\n            }`,\n        );\n    }\n\n    return (req, res, next) => {\n        runHttpQuery([req, res], {\n            method: req.method,\n            options: options,\n            query: req.method === 'POST' ? req.body : req.query,\n            request: convertNodeHttpToRequest(req),\n        }).then(\n            ({ graphqlResponse, responseInit }) => {\n                if (responseInit.headers) {\n                    for (const [name, value] of Object.entries(\n                        responseInit.headers,\n                    )) {\n                        res.setHeader(name, value);\n                    }\n                }\n                res.write(graphqlResponse);\n                res.end();\n            },\n            error => {\n                if ('HttpQueryError' !== error.name) {\n                    return next(error);\n                }\n\n                if (error.headers) {\n                    for (const [name, value] of Object.entries(error.headers)) {\n                        res.setHeader(name, value);\n                    }\n                }\n\n                res.statusCode = error.statusCode;\n                res.write(error.message);\n                res.end();\n            },\n        );\n    };\n}\n","/**\n * https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md\n */\n\nimport { In, Like } from 'typeorm';\nimport uuid from 'uuid/v4';\nimport { TYPE_DATETIME, DB_QUERY_FIND_MAX_PAGE_SIZE } from 'project-minimum-core';\nimport { getASTAt, getSelectionAt } from './ast';\nimport { CodeId } from '../database/code-id';\nimport { Query } from '../database/query';\n\nexport default class ResolverGenerator {\n    static make(schema, databaseEntityManager, connection) {\n        const entities = Object.values(schema.getSchema());\n\n        return entities.map(entity =>\n            this.makeForEntity(\n                entity,\n                schema,\n                databaseEntityManager,\n                connection,\n            ),\n        );\n    }\n\n    static makeGetForEntity(entity, schema, databaseEntityManager, connection) {\n        const databaseEntity = databaseEntityManager.getByDefinition(entity);\n\n        return async (source, args, context, info) => {\n            const result = {\n                errors: [],\n                data: null,\n            };\n\n            const { code } = args;\n\n            if (!_.isne(code)) {\n                result.errors.push({\n                    code: 'code_missing',\n                    message: 'Code is missing in the request',\n                });\n                return result;\n            }\n\n            const selectedFields = getSelectionAt(info, 'data');\n            const repository = connection.getRepository(databaseEntity);\n\n            let dbItem = null;\n            await this.wrap(async () => {\n                dbItem = await repository.findOne({\n                    where: {\n                        code: code.trim(),\n                    },\n                    select: this.getRealFields(selectedFields, entity),\n                });\n            }, result.errors);\n\n            if (!result.errors.length) {\n                if (!dbItem) {\n                    result.errors.push({\n                        code: 'not_found',\n                        message: 'Element not found',\n                    });\n                }\n            }\n\n            if (dbItem) {\n                result.data = this.convertToPlain(dbItem, entity);\n            }\n\n            return result;\n        };\n    }\n\n    static makeFindForEntity(\n        entity,\n        schema,\n        databaseEntityManager,\n        connection,\n    ) {\n        const databaseEntity = databaseEntityManager.getByDefinition(entity);\n\n        return async (source, args, context, info) => {\n            const result = {\n                errors: [],\n                data: [],\n                limit: DB_QUERY_FIND_MAX_PAGE_SIZE,\n                offset: 0,\n            };\n\n            const { filter, search, sort } = args;\n\n            const { limit, offset } = this.getLimitOffset(args);\n            if (limit > DB_QUERY_FIND_MAX_PAGE_SIZE) {\n                result.errors.push({\n                    code: 'limit_too_high',\n                    message: 'Limit too high',\n                });\n\n                return result;\n            }\n\n            if (filter !== undefined && search !== undefined) {\n                result.errors.push({\n                    code: 'search_filter_conflict',\n                    message:\n                        'You can not set both search and filter at the same time',\n                });\n\n                return result;\n            }\n\n            result.limit = limit;\n            result.offset = offset;\n\n            const selectedFields = getSelectionAt(info, 'data');\n            const repository = connection.getRepository(databaseEntity);\n            const where = this.makeWhereFind(filter, search);\n\n            await this.wrap(async () => {\n                result.data = (await repository.find({\n                    select: this.getRealFields(selectedFields, entity),\n                    where,\n                    order: _.ione(sort) ? sort : {},\n                    skip: result.offset,\n                    take: result.limit,\n                })).map(item => this.convertToPlain(item, entity));\n            }, result.errors);\n\n            if (getASTAt(info, 'count')) {\n                // count asked\n                await this.wrap(async () => {\n                    result.count = await repository.count({\n                        where,\n                    });\n                }, result.errors);\n            }\n\n            return result;\n        };\n    }\n\n    static makePutForEntity(entity, schema, databaseEntityManager, connection) {\n        const databaseEntity = databaseEntityManager.getByDefinition(entity);\n\n        return async (source, args) => {\n            const result = {\n                errors: [],\n                code: null,\n                data: {},\n            };\n\n            let { code, data } = args;\n\n            const repository = connection.getRepository(databaseEntity);\n            delete data.code; // there is no way to set the code manually\n\n            let isNewItem = false;\n            if (typeof code !== 'string' || !code.length) {\n                code = uuid();\n                data.code = code;\n                isNewItem = true;\n            }\n\n            // cast everything that is possible to cast\n            data = entity.prepareData(data);\n            // then validate\n            const { errors, data: safeData } = await entity.validateData(data);\n            if (errors) {\n                result.errors = errors.map(error => ({\n                    message: error.message,\n                    code: 'validation',\n                    reference: error.field,\n                }));\n\n                return result;\n            }\n\n            data = safeData;\n\n            const singleReferences = entity.getSingleReferences();\n\n            await this.wrap(async () => {\n                const codeToId = new CodeId({\n                    connection,\n                });\n\n                // translate all single-reference codes to ids\n                for (let i = 0; i < singleReferences.length; i += 1) {\n                    const {\n                        referenceFieldName,\n                        referencedDatabaseEntity,\n                    } = this.getReferenceAttributes(\n                        singleReferences[i],\n                        databaseEntityManager,\n                        entity,\n                        schema,\n                    );\n                    if (referenceFieldName in data) {\n                        codeToId.addCode(\n                            data[referenceFieldName],\n                            referencedDatabaseEntity,\n                        );\n                    }\n                }\n\n                await codeToId.obtain();\n\n                for (let i = 0; i < singleReferences.length; i += 1) {\n                    const reference = singleReferences[i];\n                    const referenceFieldName = reference.getName();\n\n                    if (referenceFieldName in data) {\n                        data[referenceFieldName] = codeToId.getId(\n                            data[referenceFieldName],\n                        );\n                    }\n                }\n\n                let databaseItem = null;\n                if (isNewItem) {\n                    databaseItem = repository.create(data);\n                } else {\n                    // find id by code\n                    databaseItem = await repository.findOne({\n                        where: {\n                            code: code.trim(),\n                        },\n                        select: ['id'],\n                    });\n                    if (!databaseItem) {\n                        result.errors.push({\n                            code: 'not_found',\n                            message: 'Element not found',\n                        });\n                        return;\n                    }\n                    repository.merge(databaseItem, data);\n                }\n\n                await repository.save(databaseItem);\n                await this.manageMultipleReferences({\n                    entity,\n                    databaseEntityManager,\n                    connection,\n                    id: databaseItem.id,\n                    data,\n                    schema,\n                });\n\n                result.code = code;\n                result.data = this.convertToPlain(databaseItem, entity);\n            }, result.errors);\n\n            return result;\n        };\n    }\n\n    static makeDeleteForEntity(\n        entity,\n        schema,\n        databaseEntityManager,\n        connection,\n    ) {\n        const databaseEntity = databaseEntityManager.getByDefinition(entity);\n\n        return async (source, args) => {\n            const result = {\n                errors: [],\n                code: null,\n                data: {},\n            };\n\n            const { code } = args;\n\n            if (typeof code !== 'string' || !code.length) {\n                result.errors.push({\n                    code: 'illegal_code',\n                    message: 'Code is illegal',\n                });\n\n                return result;\n            }\n\n            result.code = code;\n\n            const repository = connection.getRepository(databaseEntity);\n\n            const item = await repository.findOne({\n                where: { code: code.trim() },\n                select: ['id'],\n            });\n            if (!item) {\n                result.errors.push({\n                    code: 'not_found',\n                    message: 'Element not found',\n                });\n            } else {\n                const id = repository.getId(item);\n                await this.wrap(async () => {\n                    await repository.delete(id);\n                }, result.errors);\n\n                // drop reference data\n                const references = entity.getMultipleReferences();\n\n                for (let i = 0; i < references.length; i += 1) {\n                    const referenceField = references[i];\n                    const {\n                        // referenceFieldName,\n                        referenceTableName,\n                        referenceDatabaseEntity,\n                        // referencedDatabaseEntity,\n                    } = this.getReferenceAttributes(\n                        referenceField,\n                        databaseEntityManager,\n                        entity,\n                        schema,\n                    );\n\n                    const referenceRepository = connection.getRepository(\n                        referenceDatabaseEntity,\n                    );\n                    const referenceQueryBuilder = referenceRepository.createQueryBuilder(\n                        referenceTableName,\n                    );\n\n                    // delete all\n                    // eslint-disable-next-line no-await-in-loop\n                    await referenceQueryBuilder\n                        .delete()\n                        .from(referenceTableName)\n                        .where('self = :id', { id })\n                        .execute();\n                }\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     *\n     * @param entity\n     * @param schema\n     * @param databaseEntityManager\n     * @param connection\n     * @returns {*}\n     */\n    static makeForEntity(entity, schema, databaseEntityManager, connection) {\n        const name = entity.getCamelName();\n        return {\n            Query: {\n                [`${name}Get`]: this.makeGetForEntity(\n                    entity,\n                    schema,\n                    databaseEntityManager,\n                    connection,\n                ),\n                [`${name}Find`]: this.makeFindForEntity(\n                    entity,\n                    schema,\n                    databaseEntityManager,\n                    connection,\n                ),\n            },\n            Mutation: {\n                [`${name}Put`]: this.makePutForEntity(\n                    entity,\n                    schema,\n                    databaseEntityManager,\n                    connection,\n                ),\n                [`${name}Delete`]: this.makeDeleteForEntity(\n                    entity,\n                    schema,\n                    databaseEntityManager,\n                    connection,\n                ),\n            },\n            [name]: this.makeReferenceResolversForEntity(\n                entity,\n                schema,\n                databaseEntityManager,\n                connection,\n            ),\n        };\n    }\n\n    static async manageMultipleReferences({\n        entity,\n        databaseEntityManager,\n        schema,\n        connection,\n        id,\n        data,\n    }) {\n        const references = entity.getMultipleReferences();\n\n        for (let i = 0; i < references.length; i += 1) {\n            const referenceField = references[i];\n            const {\n                referenceFieldName,\n                referenceTableName,\n                referenceDatabaseEntity,\n                referencedDatabaseEntity,\n            } = this.getReferenceAttributes(\n                referenceField,\n                databaseEntityManager,\n                entity,\n                schema,\n            );\n\n            if (referenceFieldName in data) {\n                const ids = [];\n                const values = data[referenceFieldName];\n\n                if (Array.isArray(values) && values.length) {\n                    const codeToId = new CodeId({\n                        connection,\n                    });\n                    values.forEach(code =>\n                        codeToId.addCode(code, referencedDatabaseEntity),\n                    );\n\n                    // eslint-disable-next-line no-await-in-loop\n                    await codeToId.obtain();\n\n                    values.forEach(code => ids.push(codeToId.getId(code)));\n                }\n\n                const referenceRepository = connection.getRepository(\n                    referenceDatabaseEntity,\n                );\n                const referenceQueryBuilder = referenceRepository.createQueryBuilder(\n                    referenceTableName,\n                );\n\n                // delete all\n                // eslint-disable-next-line no-await-in-loop\n                await referenceQueryBuilder\n                    .delete()\n                    .from(referenceTableName)\n                    .where('self = :id', { id })\n                    .execute();\n\n                // and re-create\n                if (ids.length) {\n                    // eslint-disable-next-line no-await-in-loop\n                    await referenceQueryBuilder\n                        .insert()\n                        .into(referenceTableName)\n                        .values(\n                            ids.map(referenceId => ({\n                                self: id,\n                                rel: referenceId,\n                            })),\n                        )\n                        .execute();\n                }\n            }\n        }\n    }\n\n    static makeReferenceResolversForEntity(\n        entity,\n        schema,\n        databaseEntityManager,\n        connection,\n    ) {\n        const resolvers = {};\n\n        // get all references\n        const references = entity.getReferences();\n        if (!references.length) {\n            return resolvers;\n        }\n\n        const args = {\n            entity,\n            schema,\n            databaseEntityManager,\n            connection,\n        };\n\n        references.forEach(referenceField => {\n            resolvers[referenceField.getName()] = referenceField.isMultiple()\n                ? this.makeReferenceResolverMultiple({\n                      referenceField,\n                      ...args,\n                  })\n                : this.makeReferenceResolverSingle({ referenceField, ...args });\n        });\n\n        return resolvers;\n    }\n\n    static makeReferenceResolverSingle({\n        referenceField,\n        entity,\n        databaseEntityManager,\n        schema,\n        connection,\n    }) {\n        return async (source, args, { dataLoaderPool }, info) => {\n            const referenceFieldName = referenceField.getName();\n\n            // check if the parent item data does not have any value that we can reference with\n            const referenceValue = source[referenceFieldName];\n            if (!parseInt(referenceValue, 10)) {\n                return null;\n            }\n\n            const {\n                referencedDatabaseEntity,\n                referencedEntityName,\n            } = this.getReferenceAttributes(\n                referenceField,\n                databaseEntityManager,\n                entity,\n                schema,\n            );\n\n            const selectedFields = getSelectionAt(info);\n            const select = this.getRealFields(selectedFields, entity);\n            const referencedRepository = connection.getRepository(\n                referencedDatabaseEntity,\n            );\n\n            const key = `${referencedEntityName}__${select.join('.')}`;\n            const loader = dataLoaderPool.get(key, async ids => {\n                const errors = [];\n                const map = {};\n\n                try {\n                    const items = await referencedRepository.find({\n                        where: {\n                            id: In(ids),\n                        },\n                        select,\n                    });\n\n                    items.forEach(item => {\n                        map[item.id] = item;\n                    });\n                } catch (e) {\n                    errors.push({\n                        code: 'internal',\n                        message: __DEV__ ? e.message : 'Internal error',\n                    });\n                    logger.error('Unable to fetch some items', e);\n                }\n\n                // maintain the right order\n                return ids.map(id => ({\n                    item: id in map ? map[id] : null,\n                    errors,\n                }));\n            });\n\n            const item = await loader.load(referenceValue);\n            if (item.errors.length) {\n                return null;\n            }\n\n            return item.item;\n        };\n    }\n\n    static makeReferenceResolverMultiple({\n        referenceField,\n        entity,\n        databaseEntityManager,\n        schema,\n        connection,\n    }) {\n        return async (source, args, context, info) => {\n            // check if the parent item data does not have any value that we can reference with\n            const referenceValue = source.id;\n            if (!parseInt(referenceValue, 10)) {\n                return [];\n            }\n\n            const {\n                referenceFieldName,\n                referenceTableName,\n                referencedDatabaseEntity,\n                referencedTableName,\n                referencedEntity,\n            } = this.getReferenceAttributes(\n                referenceField,\n                databaseEntityManager,\n                entity,\n                schema,\n            );\n\n            const referencedRepository = connection.getRepository(\n                referencedDatabaseEntity,\n            );\n            const referencedQueryBuilder = referencedRepository.createQueryBuilder();\n\n            let { query } = Query.make({\n                args: { ...args, select: getSelectionAt(info) },\n                queryBuilder: referencedQueryBuilder,\n                entity: referencedEntity,\n                tableName: referencedTableName,\n                parameters: {\n                    restrictLimit: false,\n                },\n            });\n\n            // todo: this kind of query can be batched in some cases\n            // const canBatch =\n            //     typeof limit === 'undefined' && typeof offset === 'undefined';\n\n            let items = [];\n            const errors = [];\n\n            try {\n                const referencedTableNameSafe = Query.sanitize(\n                    referencedTableName,\n                );\n                const referenceFieldNameSafe = Query.sanitize(\n                    referenceFieldName,\n                );\n\n                query = query\n                    // filter by the relation\n                    .innerJoinAndSelect(\n                        referenceTableName,\n                        referenceFieldName,\n                        `${referenceFieldNameSafe}.rel = ${referencedTableNameSafe}.id and ${referenceFieldNameSafe}.self = :referenceValue`,\n                        { referenceValue },\n                    );\n\n                items = await query.getMany();\n                // items = await query.getRawMany();\n            } catch (e) {\n                errors.push({\n                    code: 'internal',\n                    message: __DEV__ ? e.message : 'Internal error',\n                });\n                logger.error('Internal error', e);\n            }\n\n            if (errors.length) {\n                return [];\n            }\n\n            return items;\n        };\n    }\n\n    static async wrap(fn, errors) {\n        try {\n            await fn();\n        } catch (e) {\n            errors.push({\n                code: 'internal',\n                message: __DEV__ ? e.message : 'Internal error',\n            });\n            logger.error('Internal error', e);\n        }\n    }\n\n    static makeWhereFind(filter, search) {\n        const where = {};\n\n        if (_.isne(search)) {\n            // a very basic type of search - by the part of code\n            where.code = Like(`%${search.replace(/[^a-zA-Z0-9_-]/, '')}%`);\n        }\n\n        return where;\n    }\n\n    static convertToPlain(dbItem, entity) {\n        const plain = {};\n        entity.getFields().forEach(field => {\n            const fieldName = field.getName();\n            const fieldType = field.getActualType();\n            const multiple = field.isMultiple();\n            const fieldValue = dbItem[fieldName];\n            if (typeof fieldValue !== 'undefined' && fieldValue !== null) {\n                // todo: probably, apollo server is capable of casting Date to String by it's own?\n                if (fieldType === TYPE_DATETIME) {\n                    if (multiple) {\n                        plain[fieldName] = fieldValue.map(subItem =>\n                            subItem instanceof Date\n                                ? subItem.toISOString()\n                                : null,\n                        );\n                    } else {\n                        plain[fieldName] =\n                            fieldValue instanceof Date\n                                ? fieldValue.toISOString()\n                                : null;\n                    }\n                } else {\n                    plain[fieldName] = fieldValue;\n                }\n            } else if (fieldName in dbItem) {\n                plain[fieldName] = null;\n            }\n        });\n\n        // plus id, always there\n        if ('id' in dbItem) {\n            plain.id = dbItem.id;\n        }\n\n        return plain;\n    }\n\n    /**\n     * @deprecated\n     * @param fields\n     * @param entity\n     * @returns {*}\n     */\n    static getRealFields(fields, entity) {\n        const realFields = entity\n            .getFields()\n            .filter(field => !(field.isReference() && field.isMultiple()))\n            .map(field => field.getName());\n        const toSelect = _.intersection(fields, realFields);\n        if (!toSelect.includes('id')) {\n            toSelect.push('id');\n        }\n        if (!toSelect.includes('code')) {\n            toSelect.push('code');\n        }\n\n        return toSelect;\n    }\n\n    /**\n     * @deprecated\n     * @param args\n     * @returns {{offset: *, limit: *}}\n     */\n    static getLimitOffset(args) {\n        let { limit, offset, page, pageSize } = args;\n\n        limit = parseInt(limit, 10);\n        if (Number.isNaN(limit)) {\n            limit = DB_QUERY_FIND_MAX_PAGE_SIZE;\n        }\n\n        offset = parseInt(offset, 10);\n        if (Number.isNaN(offset)) {\n            offset = 0;\n        }\n\n        pageSize = parseInt(pageSize, 10);\n        if (!Number.isNaN(pageSize)) {\n            limit = pageSize;\n        }\n\n        page = parseInt(page, 10);\n        if (!Number.isNaN(page)) {\n            offset = (page - 1) * limit;\n        }\n\n        return { limit, offset };\n    }\n\n    static getReferenceAttributes(\n        referenceField,\n        databaseEntityManager,\n        entity,\n        schema,\n    ) {\n        // the name of the field we use to access this relation (e.g. \"partner\" or \"pets\")\n        const referenceFieldName = referenceField.getName();\n\n        // ///////////////////////////////////////\n        // ReferencED entity\n        // the database entity name, which we make a reference to (e.g. \"person\" or \"pet\")\n        const referencedEntityName = referenceField.getReferencedEntityName();\n        // the referenced schema entity\n        const referencedEntity = schema.getEntity(referencedEntityName);\n        // the referenced database entity\n        const referencedDatabaseEntity = databaseEntityManager.getByName(\n            referencedEntityName,\n        );\n        // the table name of the referenced database entity (e.g. \"eq_e_person\" or \"eq_e_pet\")\n        const referencedTableName = databaseEntityManager.constructor.getTableName(\n            referencedEntity,\n        );\n\n        // ///////////////////////////////////////\n        // Reference entity (only for multiple)\n        let referenceEntityName = null;\n        // a database entity that is represented by this table\n        let referenceDatabaseEntity = null;\n        // a table we use to store multiple references\n        let referenceTableName = null;\n        if (referenceField.isMultiple()) {\n            referenceEntityName = databaseEntityManager.constructor.getName(\n                entity,\n                referenceField,\n            );\n\n            referenceTableName = databaseEntityManager.constructor.getReferenceTableName(\n                entity,\n                referenceField,\n            );\n\n            // we need to get a database entity by its name\n            referenceDatabaseEntity = databaseEntityManager.getByName(\n                databaseEntityManager.constructor.getName(\n                    entity,\n                    referenceField,\n                ),\n            );\n        }\n\n        return {\n            referenceFieldName,\n\n            referencedEntity,\n            referencedEntityName,\n            referencedDatabaseEntity,\n            referencedTableName,\n\n            referenceEntityName,\n            referenceDatabaseEntity,\n            referenceTableName,\n        };\n    }\n\n    // static getSingleReferences(entity) {\n    //     return entity\n    //         .getFields()\n    //         .filter(field => field.isReference() && !field.isMultiple());\n    // }\n\n    // static getMultipleReferences(entity) {\n    //     return entity\n    //         .getFields()\n    //         .filter(field => field.isReference() && field.isMultiple());\n    // }\n\n    // static getReferences(entity) {\n    //     return entity.getFields().filter(field => field.isReference());\n    // }\n}\n","import {\n    TYPE_STRING,\n    TYPE_BOOLEAN,\n    TYPE_DATETIME,\n    TYPE_INTEGER,\n    ENTITY_ID_FIELD_NAME,\n} from 'project-minimum-core';\n\nexport default class TypeGenerator {\n    static make(schema) {\n        const gqlTypes = Object.values(schema.getSchema()).map(entity =>\n            this.makeForEntity(entity, schema),\n        );\n\n        return gqlTypes;\n    }\n\n    /**\n     * @private\n     * @param entity\n     * @param schema\n     * @returns {string}\n     */\n    static makeForEntity(entity, schema) {\n        const name = entity.getCamelName();\n\n        const tFields = [];\n        const iFields = [];\n        const fFields = [];\n        const sFields = [];\n        entity.getFields().forEach(field => {\n            tFields.push(\n                `${this.getQueryFieldName(\n                    field,\n                    schema,\n                )}: ${this.getGQLFieldType(field, schema)}`,\n            );\n            const fieldName = field.getName();\n            if (fieldName !== ENTITY_ID_FIELD_NAME) {\n                // code is a read-only field\n                iFields.push(\n                    `${field.getName()}: ${this.getGQLFieldType(\n                        field,\n                        schema,\n                        true,\n                    )}${false && field.isMandatory() ? '!' : ''}`,\n                );\n            }\n            fFields.push(`${fieldName}: IFilterFieldValue`);\n            sFields.push(`${fieldName}: SortOrder`);\n        });\n\n        return `\ntype ${name}Result {\n    errors: [Error]\n    data: ${name}\n}\n\ntype ${name}SearchResult {\n    errors: [Error]\n    data: [${name}]!\n    limit: Int!\n    offset: Int!\n    count: Int\n}\n\ntype ${name} {\n${tFields.map(x => `    ${x}`).join('\\n')}\n}\n\ninput I${name} {\n${iFields.map(x => `    ${x}`).join('\\n')}\n}\n\ninput I${name}Filter {\n    SYSLogic: FilterLogic\n    SYSSubFilter: [I${name}Filter]\n${fFields.map(x => `    ${x}`).join('\\n')}\n}\n\ninput I${name}Sort {\n${sFields.map(x => `    ${x}`).join('\\n')}\n}\n\ntype Query {\n    ${name}Get(code: String!): ${name}Result\n    ${name}Find(\n        filter: I${name}Filter\n        search: String\n        sort: I${name}Sort\n        limit: Int\n        offset: Int\n        page: Int\n        pageSize: Int\n        count: Boolean\n    ): ${name}SearchResult\n}\n\ntype Mutation {\n    ${name}Delete(code: String!): ${name}Result\n    ${name}Put(code: String, data: I${name}!): ${name}Result\n}\n        `;\n    }\n\n    static getGQLFieldType(field, schema, input = false) {\n        let gqlType = 'String';\n        if (field.isReference()) {\n            // reference, for input we accept codes, for types - just put type\n            if (input) {\n                gqlType = 'String';\n            } else {\n                const referencedEntityName = field.getReferencedEntityName();\n                const referencedEntity = schema.getEntity(referencedEntityName);\n                gqlType = referencedEntity.getCamelName();\n            }\n        } else {\n            const type = field.getActualType();\n            switch (type) {\n                case TYPE_STRING:\n                    gqlType = 'String';\n                    break;\n                case TYPE_INTEGER:\n                    gqlType = 'Int';\n                    break;\n                case TYPE_DATETIME:\n                    gqlType = 'String';\n                    break;\n                case TYPE_BOOLEAN:\n                    gqlType = 'Boolean';\n                    break;\n                default:\n                    gqlType = 'String';\n            }\n        }\n\n        if (field.isMultiple()) {\n            gqlType = `[${gqlType}]`;\n        }\n\n        return gqlType;\n    }\n\n    static getQueryFieldName(field, schema) {\n        if (field.isReference() && field.isMultiple()) {\n            const referencedEntityName = field.getReferencedEntityName();\n            const referencedEntity = schema.getEntity(referencedEntityName);\n            const referencedEntityNameCamel = referencedEntity.getCamelName();\n            return `${field.getName()}(\n                filter: I${referencedEntityNameCamel}Filter\n                sort: I${referencedEntityNameCamel}Sort\n                limit: Int\n                offset: Int\n                page: Int\n                pageSize: Int\n                count: Int\n            )`;\n        }\n\n        return field.getName();\n    }\n}\n","import isObject from 'lodash.isobject';\n// const random = require('lodash.random');\n// const isNumber = require('lodash.isnumber');\nimport isFunction from 'lodash.isfunction';\nimport union from 'lodash.union';\nimport intersection from 'lodash.intersection';\nimport difference from 'lodash.difference';\nimport get from 'lodash.get';\nimport cloneDeep from 'lodash.clonedeep';\n// const deepFreeze = require('deep-freeze-node');\n// const isEqual = require('lodash.isequal');\n\nexport default {\n    isArray: Array.isArray,\n    isObject,\n    isFunction,\n    union,\n    intersection,\n    difference,\n    cloneDeep,\n    get,\n    iane: arg => {\n        return Array.isArray(arg) && arg.length > 0;\n    },\n    ione: arg => {\n        return isObject(arg) && Object.keys(arg).length > 0;\n    },\n    isne: arg => {\n        return typeof arg === 'string' && !!arg.length;\n    },\n};\n","import { Schema } from 'project-minimum-core';\nimport SchemaEntity from '../entity/schema';\n\nclass SchemaStore {\n    static async load(type, connectionManager) {\n        const connection = await connectionManager.getSystem();\n\n        const schema = await connection.getRepository(SchemaEntity).findOne({\n            draft: type === 'draft',\n        });\n\n        if (!schema) {\n            return null;\n        }\n\n        return new Schema(schema);\n    }\n\n    static async put(type, schema, connectionManager) {\n        const errors = await schema.checkHealth();\n        if (!_.iane(errors)) {\n            const connection = await connectionManager.getSystem();\n            const repo = connection.getRepository(SchemaEntity);\n\n            // get current\n            let current = await connection.getRepository(SchemaEntity).findOne({\n                draft: false,\n            });\n            if (current) {\n                const currentSchema = new Schema(current);\n                // have current => update\n                repo.merge(current, {\n                    version: currentSchema.getVersion() + 1,\n                    declaration: schema.getSchema(),\n                });\n            } else {\n                // else => create\n                current = repo.create({\n                    draft: false,\n                    version: 0,\n                    declaration: schema.getSchema(),\n                });\n            }\n\n            try {\n                // store\n                await repo.save(current);\n            } catch (error) {\n                logger.error('Unable to save schema to the database', error);\n                errors.push({\n                    message: __DEV__\n                        ? error.message\n                        : 'Unable to save schema to the database',\n                    code: 'internal_db_error',\n                    type: 'internal',\n                });\n            }\n        }\n\n        return errors;\n    }\n}\n\nexport default SchemaStore;\n","import { camel } from 'naming-style';\n\nexport const injectPassword = (url, password = null) => {\n    if (_.isne(password)) {\n        const oUrl = new URL(url);\n        oUrl.password = password;\n\n        url = oUrl.toString();\n    }\n\n    return url;\n};\n\nexport const decomposeURL = url => {\n    const oUrl = new URL(url);\n\n    const parts = {\n        host: oUrl.hostname,\n        port: oUrl.port,\n        password: oUrl.password,\n    };\n\n    if (!_.isne(parts.host)) {\n        // invalid url\n        return null;\n    }\n\n    if (Number.isNaN(parts.port)) {\n        delete parts.port;\n    }\n\n    return parts;\n};\n\n/**\n * @deprecated\n * @param str\n * @returns {string}\n */\nexport const convertToCamel = str => {\n    str = camel(str.toLowerCase());\n    return `${str.substr(0, 1).toUpperCase()}${str.substr(1, str.length - 1)}`;\n};\n","import { MigrationInterface, QueryRunner, Table } from 'typeorm';\nimport { DB_SCHEMA_TABLE_NAME } from 'project-minimum-core';\n\n/**\n * https://github.com/typeorm/typeorm/blob/master/docs/migrations.md\n */\nexport class Seed1517934720430 {\n    async up(queryRunner) {\n        await queryRunner.createTable(\n            new Table({\n                name: DB_SCHEMA_TABLE_NAME,\n                columns: [\n                    {\n                        name: 'id',\n                        type: 'integer',\n                        isNullable: false,\n                        isGenerated: true,\n                        isPrimary: true,\n                        isUnique: true,\n                        isArray: false,\n                        length: '',\n                        zerofill: false,\n                        unsigned: true,\n                        generated: 'increment',\n                    },\n                    {\n                        name: 'draft',\n                        type: 'boolean',\n                        isNullable: false,\n                        isGenerated: false,\n                        isPrimary: false,\n                        isUnique: false,\n                        isArray: false,\n                        length: '',\n                        zerofill: false,\n                        unsigned: true,\n                    },\n                    {\n                        name: 'declaration',\n                        type: 'json',\n                        isNullable: false,\n                        isGenerated: false,\n                        isPrimary: false,\n                        isUnique: false,\n                        isArray: false,\n                        length: '',\n                        zerofill: false,\n                        unsigned: true,\n                    },\n                    {\n                        name: 'version',\n                        type: 'integer',\n                        isNullable: true,\n                        isGenerated: false,\n                        isPrimary: false,\n                        isUnique: false,\n                        isArray: false,\n                        length: '',\n                        zerofill: false,\n                        unsigned: true,\n                    },\n                ],\n            }),\n            true,\n        );\n\n        // todo: users\n        // todo: groups\n\n        logger.info('🌱 Seed migration applied');\n    }\n    async down(queryRunner) {}\n}\n","import { Seed1517934720430 } from './1517934720430-Seed';\n\nexport default [\n    Seed1517934720430,\n];\n","module.exports = require(\"@apollographql/graphql-playground-html\");","module.exports = require(\"@babel/polyfill\");","module.exports = require(\"accepts\");","module.exports = require(\"apollo-server-core\");","module.exports = require(\"apollo-server-express\");","module.exports = require(\"cors\");","module.exports = require(\"dataloader\");","module.exports = require(\"ew-internals\");","module.exports = require(\"express\");","module.exports = require(\"helmet\");","module.exports = require(\"lodash.clonedeep\");","module.exports = require(\"lodash.difference\");","module.exports = require(\"lodash.get\");","module.exports = require(\"lodash.intersection\");","module.exports = require(\"lodash.isfunction\");","module.exports = require(\"lodash.isobject\");","module.exports = require(\"lodash.union\");","module.exports = require(\"md5\");","module.exports = require(\"merge-graphql-schemas\");","module.exports = require(\"naming-style\");","module.exports = require(\"path\");","module.exports = require(\"project-minimum-core\");","module.exports = require(\"redis-tag-cache\");","module.exports = require(\"typeorm\");","module.exports = require(\"uuid/v4\");"],"sourceRoot":""}
