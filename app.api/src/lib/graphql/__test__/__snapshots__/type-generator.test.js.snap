// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GQL Type generator make() should generate gql type declaration 1`] = `
Array [
  "
type ImportantPersonResult {
    errors: [Error]
    data: ImportantPerson
}

type ImportantPersonSearchResult {
    errors: [Error]
    data: [ImportantPerson]!
    limit: Int!
    offset: Int!
    count: Int
}

type ImportantPerson {
    id: String
    full_name: String
    tags: [String]
    lucky_numbers: [Int]
    birth_date: String
    has_pets: Boolean
    pets(
                filter: IPetFilter
                sort: IPetSort
                limit: Int
                offset: Int
                page: Int
                pageSize: Int
                count: Int
            ): [Pet]
    tools(
                filter: IToolFilter
                sort: IToolSort
                limit: Int
                offset: Int
                page: Int
                pageSize: Int
                count: Int
            ): [Tool]
    partner: ImportantPerson
}

input IImportantPerson {
    full_name: String
    tags: [String]
    lucky_numbers: [Int]
    birth_date: String
    has_pets: Boolean
    pets: [String]
    tools: [String]
    partner: String
}

input IImportantPersonFilter {
    SYSLogic: FilterLogic
    SYSSubFilter: [IImportantPersonFilter]
    id: IFilterFieldValue
    full_name: IFilterFieldValue
    tags: IFilterFieldValue
    lucky_numbers: IFilterFieldValue
    birth_date: IFilterFieldValue
    has_pets: IFilterFieldValue
    pets: IFilterFieldValue
    tools: IFilterFieldValue
    partner: IFilterFieldValue
}

input IImportantPersonSort {
    id: SortOrder
    full_name: SortOrder
    tags: SortOrder
    lucky_numbers: SortOrder
    birth_date: SortOrder
    has_pets: SortOrder
    pets: SortOrder
    tools: SortOrder
    partner: SortOrder
}

type Query {
    ImportantPersonGet(id: String!): ImportantPersonResult
    ImportantPersonFind(
        filter: IImportantPersonFilter
        search: String
        sort: IImportantPersonSort
        limit: Int
        offset: Int
        page: Int
        pageSize: Int
        count: Boolean
    ): ImportantPersonSearchResult
}

type Mutation {
    ImportantPersonDelete(id: String!): ImportantPersonResult
    ImportantPersonPut(id: String, data: IImportantPerson!): ImportantPersonResult
}
        ",
  "
type PetResult {
    errors: [Error]
    data: Pet
}

type PetSearchResult {
    errors: [Error]
    data: [Pet]!
    limit: Int!
    offset: Int!
    count: Int
}

type Pet {
    id: String
    nickname: String
}

input IPet {
    nickname: String
}

input IPetFilter {
    SYSLogic: FilterLogic
    SYSSubFilter: [IPetFilter]
    id: IFilterFieldValue
    nickname: IFilterFieldValue
}

input IPetSort {
    id: SortOrder
    nickname: SortOrder
}

type Query {
    PetGet(id: String!): PetResult
    PetFind(
        filter: IPetFilter
        search: String
        sort: IPetSort
        limit: Int
        offset: Int
        page: Int
        pageSize: Int
        count: Boolean
    ): PetSearchResult
}

type Mutation {
    PetDelete(id: String!): PetResult
    PetPut(id: String, data: IPet!): PetResult
}
        ",
  "
type ToolResult {
    errors: [Error]
    data: Tool
}

type ToolSearchResult {
    errors: [Error]
    data: [Tool]!
    limit: Int!
    offset: Int!
    count: Int
}

type Tool {
    id: String
    name: String
}

input ITool {
    name: String
}

input IToolFilter {
    SYSLogic: FilterLogic
    SYSSubFilter: [IToolFilter]
    id: IFilterFieldValue
    name: IFilterFieldValue
}

input IToolSort {
    id: SortOrder
    name: SortOrder
}

type Query {
    ToolGet(id: String!): ToolResult
    ToolFind(
        filter: IToolFilter
        search: String
        sort: IToolSort
        limit: Int
        offset: Int
        page: Int
        pageSize: Int
        count: Boolean
    ): ToolSearchResult
}

type Mutation {
    ToolDelete(id: String!): ToolResult
    ToolPut(id: String, data: ITool!): ToolResult
}
        ",
]
`;
